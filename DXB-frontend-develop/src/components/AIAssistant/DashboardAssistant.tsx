import React, { useState, useRef, useEffect } from 'react';
import { Card, Input, Button, Space, Avatar, Typography, Spin, message, Tag, Tooltip } from 'antd';
import { 
    SendOutlined, 
    RobotOutlined, 
    UserOutlined, 
    BrainOutlined,
    MessageOutlined
} from '@ant-design/icons';
import { memoryService, MemoryItem } from '@/services/memoryService';

const { TextArea } = Input;
const { Text, Paragraph } = Typography;

interface DashboardAssistantProps {
    onMemoryAdd?: (memory: MemoryItem) => void;
    showMemories?: boolean;
    compact?: boolean;
}

const DashboardAssistant: React.FC<DashboardAssistantProps> = ({ 
    onMemoryAdd, 
    showMemories = false,
    compact = true
}) => {
    const [messages, setMessages] = useState<Array<{
        id: string;
        type: 'user' | 'assistant';
        content: string;
        timestamp: Date;
    }>>([]);
    const [inputValue, setInputValue] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isExpanded, setIsExpanded] = useState(false);
    const messagesEndRef = useRef<HTMLDivElement>(null);

    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const handleSendMessage = async () => {
        if (!inputValue.trim() || isLoading) return;

        const userMessage = {
            id: Date.now().toString(),
            type: 'user' as const,
            content: inputValue,
            timestamp: new Date(),
        };

        setMessages(prev => [...prev, userMessage]);
        setInputValue('');
        setIsLoading(true);

        try {
            // –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
            const memoriesResponse = await memoryService.searchMemories(inputValue, 3);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
            let response = '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! ';
            
            if (memoriesResponse.memories.length > 0) {
                const memory = memoriesResponse.memories[0];
                response += `–ù–∞ –æ—Å–Ω–æ–≤–µ –º–æ–∏—Ö –∑–Ω–∞–Ω–∏–π: ${memory.text.slice(0, 100)}...`;
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if (onMemoryAdd) {
                    const newMemory: MemoryItem = {
                        text: `Dashboard query: ${inputValue}`,
                        type: 'user',
                        age: 'week',
                    };
                    try {
                        await memoryService.addMemory(newMemory);
                        onMemoryAdd(newMemory);
                    } catch (error) {
                        console.error('Failed to add memory:', error);
                    }
                }
            } else {
                response += '–£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ Dubai, –∞–Ω–∞–ª–∏—Ç–∏–∫–µ —Ä—ã–Ω–∫–∞ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤–∞—Ö.';
            }

            const assistantMessage = {
                id: (Date.now() + 1).toString(),
                type: 'assistant' as const,
                content: response,
                timestamp: new Date(),
            };

            setMessages(prev => [...prev, assistantMessage]);

        } catch (error) {
            console.error('Error generating response:', error);
            message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            
            const errorMessage = {
                id: (Date.now() + 1).toString(),
                type: 'assistant' as const,
                content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                timestamp: new Date(),
            };
            setMessages(prev => [...prev, errorMessage]);
        } finally {
            setIsLoading(false);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    };

    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    const handleClearHistory = () => {
        setMessages([]);
        message.success('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞');
    };

    if (compact && !isExpanded) {
        return (
            <Card
                size="small"
                style={{ cursor: 'pointer' }}
                onClick={() => setIsExpanded(true)}
            >
                <Space>
                    <RobotOutlined style={{ color: '#1890ff', fontSize: '18px' }} />
                    <Text>AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</Text>
                    <Tag color="blue" size="small">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è</Tag>
                </Space>
            </Card>
        );
    }

    return (
        <Card
            title={
                <Space>
                    <RobotOutlined style={{ color: '#1890ff' }} />
                    <span>AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</span>
                    {compact && (
                        <Button 
                            type="text" 
                            size="small" 
                            onClick={() => setIsExpanded(false)}
                        >
                            ‚úï
                        </Button>
                    )}
                </Space>
            }
            extra={
                <Space>
                    <Tooltip title="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é">
                        <Button 
                            type="text" 
                            size="small" 
                            onClick={handleClearHistory}
                        >
                            üóëÔ∏è
                        </Button>
                    </Tooltip>
                    <Tag color="green" size="small">
                        {messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π
                    </Tag>
                </Space>
            }
            style={{ 
                height: compact ? '400px' : '500px',
                display: 'flex',
                flexDirection: 'column'
            }}
        >
            <div style={{ 
                display: 'flex', 
                flexDirection: 'column', 
                height: '100%',
                overflow: 'hidden'
            }}>
                {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
                <div style={{ 
                    flex: 1, 
                    overflowY: 'auto', 
                    padding: '12px',
                    background: '#fafafa',
                    borderRadius: '6px',
                    marginBottom: '12px',
                    maxHeight: compact ? '280px' : '380px'
                }}>
                    {messages.length === 0 && (
                        <div style={{ textAlign: 'center', padding: '20px', color: '#666' }}>
                            <RobotOutlined style={{ fontSize: '24px', marginBottom: '8px' }} />
                            <div>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ Dubai</div>
                        </div>
                    )}
                    
                    {messages.map((message) => (
                        <div
                            key={message.id}
                            style={{
                                display: 'flex',
                                marginBottom: 12,
                                justifyContent: message.type === 'user' ? 'flex-end' : 'flex-start',
                            }}
                        >
                            <div style={{ display: 'flex', alignItems: 'flex-start', maxWidth: '85%' }}>
                                {message.type === 'assistant' && (
                                    <Avatar 
                                        icon={<RobotOutlined />} 
                                        size="small"
                                        style={{ backgroundColor: '#1890ff', marginRight: 6 }}
                                    />
                                )}
                                
                                <div style={{ 
                                    background: message.type === 'user' ? '#1890ff' : '#f0f2f5',
                                    color: message.type === 'user' ? 'white' : 'inherit',
                                    padding: '8px 12px',
                                    borderRadius: '8px',
                                    maxWidth: '100%',
                                    wordWrap: 'break-word',
                                    fontSize: '13px'
                                }}>
                                    <Paragraph style={{ 
                                        margin: 0, 
                                        color: message.type === 'user' ? 'white' : 'inherit',
                                        fontSize: '13px',
                                        lineHeight: '1.4'
                                    }}>
                                        {message.content}
                                    </Paragraph>
                                    
                                    <Text style={{ 
                                        fontSize: '10px', 
                                        color: message.type === 'user' ? 'rgba(255,255,255,0.6)' : '#999',
                                        display: 'block',
                                        marginTop: 4
                                    }}>
                                        {message.timestamp.toLocaleTimeString()}
                                    </Text>
                                </div>
                                
                                {message.type === 'user' && (
                                    <Avatar 
                                        icon={<UserOutlined />} 
                                        size="small"
                                        style={{ backgroundColor: '#52c41a', marginLeft: 6 }}
                                    />
                                )}
                            </div>
                        </div>
                    ))}
                    
                    {isLoading && (
                        <div style={{ display: 'flex', justifyContent: 'flex-start', marginBottom: 12 }}>
                            <Avatar 
                                icon={<RobotOutlined />} 
                                size="small"
                                style={{ backgroundColor: '#1890ff', marginRight: 6 }}
                            />
                            <div style={{ 
                                background: '#f0f2f5',
                                padding: '8px 12px',
                                borderRadius: '8px',
                                display: 'flex',
                                alignItems: 'center'
                            }}>
                                <Spin size="small" style={{ marginRight: 6 }} />
                                <Text style={{ color: '#666', fontSize: '12px' }}>–î—É–º–∞—é...</Text>
                            </div>
                        </div>
                    )}
                    
                    <div ref={messagesEndRef} />
                </div>

                {/* –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞ */}
                <div style={{ display: 'flex', gap: '6px' }}>
                    <TextArea
                        value={inputValue}
                        onChange={(e) => setInputValue(e.target.value)}
                        onKeyPress={handleKeyPress}
                        placeholder="–í–æ–ø—Ä–æ—Å –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏..."
                        autoSize={{ minRows: 1, maxRows: 2 }}
                        style={{ flex: 1, fontSize: '12px' }}
                    />
                    <Button
                        type="primary"
                        icon={<SendOutlined />}
                        onClick={handleSendMessage}
                        loading={isLoading}
                        disabled={!inputValue.trim()}
                        size="small"
                        style={{ height: 'auto', alignSelf: 'flex-end' }}
                    >
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                    </Button>
                </div>

                {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
                <div style={{ marginTop: '8px', textAlign: 'center' }}>
                    <Text style={{ fontSize: '11px', color: '#999' }}>
                        üí° –¶–µ–Ω—ã ‚Ä¢ –†–∞–π–æ–Ω—ã ‚Ä¢ –¢—Ä–µ–Ω–¥—ã ‚Ä¢ ROI
                    </Text>
                </div>
            </div>
        </Card>
    );
};

export default DashboardAssistant;
