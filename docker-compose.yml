version: '3.8'

services:
  # ========================================
  # Infrastructure (запускаются по умолчанию)
  # ========================================
  postgres:
    image: postgres:16-alpine
    container_name: dubai-postgres
    volumes:
      - realty_main_postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=dubai_realty
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: dubai-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # nginx removed - use direct access:
  # Frontend: http://localhost:3000
  # Backend: http://localhost:8000

  # ========================================
  # Backend Services
  # ========================================
  realty-main-web:
    build:
      context: ./apps/realty-main
      dockerfile: Dockerfile
    container_name: realty-main-web
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./apps/realty-main:/app
    ports:
      - "${REALTY_MAIN_WEB_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/dubai_realty
    restart: unless-stopped
    profiles: ["backend"]

  pfimport:
    build:
      context: ./apps/pfimport-main
      dockerfile: Dockerfile
    container_name: pfimport-service
    ports:
      - "${PFIMPORT_PORT:-8082}:8080"
    volumes:
      - ./apps/pfimport-main:/app
    restart: unless-stopped
    profiles: ["backend"]

  # ========================================
  # Frontend Services
  # ========================================
  dxb-frontend:
    build:
      context: ./apps/DXB-frontend-develop
      dockerfile: Dockerfile
    container_name: dxb-frontend
    ports:
      - "${DXB_FRONTEND_PORT:-3000}:80"
    volumes:
      - ./apps/DXB-frontend-develop:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    restart: unless-stopped
    profiles: ["frontend"]

  # ========================================
  # Monitoring Services
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: dubai-prometheus
    volumes:
      - ./configs/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    profiles: ["monitoring"]

  grafana:
    image: grafana/grafana:latest
    container_name: dubai-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3003}:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles: ["monitoring"]

volumes:
  realty_main_postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
