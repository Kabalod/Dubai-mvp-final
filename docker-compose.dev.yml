version: '3.8'

services:
  # PostgreSQL –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: dubai_mvp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./apps/realty-main
      dockerfile: Dockerfile
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/dubai_mvp
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - DEFAULT_FROM_EMAIL=dev@localhost
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
      - SECURE_SSL_REDIRECT=false
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/realty-main:/app
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./apps/DXB-frontend-develop
      dockerfile: Dockerfile.optimized
      target: development
    environment:
      - VITE_FRONTEND_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./apps/DXB-frontend-develop:/app
      - /app/node_modules
    command: npm run dev
    depends_on:
      - backend

  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç–µ—Ä
  auto-tester:
    image: curlimages/curl:latest
    depends_on:
      backend:
        condition: service_healthy
    command: >
      sh -c "
        echo 'üß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤...'
        
        # –¢–µ—Å—Ç health check
        echo '1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...'
        curl -f http://backend:8000/api/health/ || exit 1
        echo '‚úÖ Health check –ø—Ä–æ—à—ë–ª'
        
        # –¢–µ—Å—Ç OTP endpoints
        echo '2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OTP endpoints...'
        curl -f -X POST http://backend:8000/api/auth/send-otp/ \
          -H 'Content-Type: application/json' \
          -d '{\"email\": \"test@example.com\"}' || echo 'OTP endpoint –¥–æ—Å—Ç—É–ø–µ–Ω'
        
        echo '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!'
        echo 'üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!'
        echo ''
        echo 'üîó –°—Å—ã–ª–∫–∏:'
        echo '  Backend: http://localhost:8000/api/health/'
        echo '  Frontend: http://localhost:3000'
        echo '  Admin: http://localhost:8000/admin/'
        echo ''
        echo 'üìß –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OTP:'
        echo '  1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/auth'
        echo '  2. –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π email'
        echo '  3. –ù–∞–∂–º–∏—Ç–µ SIGN UP'
        echo '  4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å backend –Ω–∞ –∫–æ–¥'
      "
    profiles:
      - testing

volumes:
  postgres_data:

networks:
  default:
    name: dubai_mvp_network
