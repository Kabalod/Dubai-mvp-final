# üöÄ Dubai Project Manager
# –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("start", "stop", "restart", "status", "logs", "cleanup", "setup")]
    [string]$Action = "status",
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("all", "core", "ai", "frontend", "infrastructure", "monitoring")]
    [string]$Service = "all",
    
    [switch]$Force,
    [switch]$Verbose
)

$ErrorActionPreference = 'Stop'

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Colors = @{
    Red = 'Red'
    Green = 'Green'
    Yellow = 'Yellow'
    Cyan = 'Cyan'
    White = 'White'
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
function Write-Header {
    param([string]$Message)
    Write-Host "`nüöÄ $Message" -ForegroundColor $Colors.Cyan
    Write-Host ("=" * ($Message.Length + 4)) -ForegroundColor $Colors.Cyan
}

function Write-Status {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor $Colors.Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor $Colors.Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor $Colors.Red
}

function Write-Info {
    param([string]$Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor $Colors.White
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
$Services = @{
    core = @{
        name = "Core Services"
        compose_file = "docker-compose.core.yml"
        ports = @(8000, 8001, 8002)
        description = "–û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Å–µ—Ä–≤–∏—Å—ã (–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)"
    }
    ai = @{
        name = "AI Services"
        compose_file = "docker-compose.ai.yml"
        ports = @(8081, 8082, 8083)
        description = "–ò–ò —Å–µ—Ä–≤–∏—Å—ã (–ø–∞–º—è—Ç—å, –∞–≥–µ–Ω—Ç—ã, ML –º–æ–¥–µ–ª–∏)"
    }
    frontend = @{
        name = "Frontend"
        compose_file = "docker-compose.frontend.yml"
        ports = @(3000, 3001, 3002)
        description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
    }
    infrastructure = @{
        name = "Infrastructure"
        compose_file = "docker-compose.infrastructure.yml"
        ports = @(5432, 6379, 8080)
        description = "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫—ç—à, API gateway"
    }
    monitoring = @{
        name = "Monitoring"
        compose_file = "docker-compose.monitoring.yml"
        ports = @(9090, 3001, 5601)
        description = "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–µ—Ç—Ä–∏–∫–∏"
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
function Test-Docker {
    try {
        $null = docker --version
        Write-Status "Docker –Ω–∞–π–¥–µ–Ω"
        return $true
    }
    catch {
        Write-Error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop"
        return $false
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
function Test-DockerCompose {
    try {
        $null = docker compose version
        Write-Status "Docker Compose –Ω–∞–π–¥–µ–Ω"
        return $true
    }
    catch {
        Write-Error "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return $false
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
function Test-Ports {
    param([array]$Ports)
    
    Write-Info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
    $conflicts = @()
    
    foreach ($port in $Ports) {
        try {
            $connection = Test-NetConnection -ComputerName localhost -Port $port -WarningAction SilentlyContinue
            if ($connection.TcpTestSucceeded) {
                Write-Warning "–ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç"
                $conflicts += $port
            }
        }
        catch {
            # –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
        }
    }
    
    if ($conflicts.Count -eq 0) {
        Write-Status "–í—Å–µ –ø–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã"
        return $true
    }
    else {
        Write-Warning "–ù–∞–π–¥–µ–Ω–æ $($conflicts.Count) –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Ä—Ç–æ–≤"
        return $false
    }
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
function Start-Service {
    param([string]$ServiceName)
    
    $service = $Services[$ServiceName]
    if (-not $service) {
        Write-Error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: $ServiceName"
        return
    }
    
    Write-Header "–ó–∞–ø—É—Å–∫ $($service.name)"
    Write-Info $service.description
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    if (-not (Test-Ports $service.ports)) {
        Write-Warning "–í–æ–∑–º–æ–∂–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ—Ä—Ç–æ–≤"
        if (-not $Force) {
            Write-Error "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"
            return
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ compose —Ñ–∞–π–ª–∞
    $composePath = Join-Path $PSScriptRoot "..\infrastructure\docker\$($service.compose_file)"
    if (-not (Test-Path $composePath)) {
        Write-Warning "Compose —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $composePath"
        Write-Info "–°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π compose —Ñ–∞–π–ª..."
        New-DockerComposeFile -ServiceName $ServiceName -ComposePath $composePath
    }
    
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker Compose
    try {
        Set-Location (Split-Path $composePath)
        docker compose -f $composePath up -d
        Write-Status "$($service.name) –∑–∞–ø—É—â–µ–Ω"
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ $($service.name): $_"
    }
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
function Stop-Service {
    param([string]$ServiceName)
    
    $service = $Services[$ServiceName]
    if (-not $service) {
        Write-Error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: $ServiceName"
        return
    }
    
    Write-Header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ $($service.name)"
    
    $composePath = Join-Path $PSScriptRoot "..\infrastructure\docker\$($service.compose_file)"
    if (Test-Path $composePath) {
        try {
            Set-Location (Split-Path $composePath)
            docker compose -f $composePath down
            Write-Status "$($service.name) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        }
        catch {
            Write-Error "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ $($service.name): $_"
        }
    }
    else {
        Write-Warning "Compose —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $composePath"
    }
}

# –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
function Get-ServiceStatus {
    Write-Header "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ Dubai Project"
    
    foreach ($serviceName in $Services.Keys) {
        $service = $Services[$serviceName]
        Write-Host "`nüìä $($service.name)" -ForegroundColor $Colors.Cyan
        Write-Host "   –û–ø–∏—Å–∞–Ω–∏–µ: $($service.description)" -ForegroundColor $Colors.White
        Write-Host "   –ü–æ—Ä—Ç: $($service.ports -join ', ')" -ForegroundColor $Colors.White
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        $composePath = Join-Path $PSScriptRoot "..\infrastructure\docker\$($service.compose_file)"
        if (Test-Path $composePath) {
            try {
                Set-Location (Split-Path $composePath)
                $containers = docker compose -f $composePath ps --format json | ConvertFrom-Json
                if ($containers) {
                    foreach ($container in $containers) {
                        $status = if ($container.State -eq "running") { "üü¢" } else { "üî¥" }
                        Write-Host "   $status $($container.Service): $($container.State)" -ForegroundColor $Colors.White
                    }
                }
                else {
                    Write-Host "   ‚ö™ –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤" -ForegroundColor $Colors.Yellow
                }
            }
            catch {
                Write-Host "   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞" -ForegroundColor $Colors.Red
            }
        }
        else {
            Write-Host "   üìÅ Compose —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor $Colors.Yellow
        }
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ compose —Ñ–∞–π–ª–∞
function New-DockerComposeFile {
    param([string]$ServiceName, [string]$ComposePath)
    
    $service = $Services[$ServiceName]
    $content = @"
version: '3.8'

services:
  $ServiceName-service:
    image: nginx:alpine
    container_name: dubai-$ServiceName
    ports:
      - "$($service.ports[0]):80"
    volumes:
      - ./logs:/var/log/nginx
    restart: unless-stopped

networks:
  default:
    name: dubai-$ServiceName-network
"@
    
    try {
        New-Item -Path (Split-Path $ComposePath) -ItemType Directory -Force | Out-Null
        $content | Out-File -FilePath $ComposePath -Encoding UTF8
        Write-Status "–°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π compose —Ñ–∞–π–ª: $ComposePath"
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è compose —Ñ–∞–π–ª–∞: $_"
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
function Main {
    Write-Header "Dubai Project Manager"
    Write-Host "–î–µ–π—Å—Ç–≤–∏–µ: $Action" -ForegroundColor $Colors.Yellow
    Write-Host "–°–µ—Ä–≤–∏—Å: $Service" -ForegroundColor $Colors.Yellow
    Write-Host "–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥: $Verbose" -ForegroundColor $Colors.Yellow
    Write-Host "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ: $Force" -ForegroundColor $Colors.Yellow
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if (-not (Test-Docker)) { return }
    if (-not (Test-DockerCompose)) { return }
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    switch ($Action) {
        "start" {
            if ($Service -eq "all") {
                foreach ($serviceName in $Services.Keys) {
                    Start-Service $serviceName
                }
            }
            else {
                Start-Service $Service
            }
        }
        "stop" {
            if ($Service -eq "all") {
                foreach ($serviceName in $Services.Keys) {
                    Stop-Service $serviceName
                }
            }
            else {
                Stop-Service $Service
            }
        }
        "restart" {
            if ($Service -eq "all") {
                foreach ($serviceName in $Services.Keys) {
                    Stop-Service $serviceName
                    Start-Sleep -Seconds 2
                    Start-Service $serviceName
                }
            }
            else {
                Stop-Service $Service
                Start-Sleep -Seconds 2
                Start-Service $Service
            }
        }
        "status" {
            Get-ServiceStatus
        }
        "logs" {
            Write-Info "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)"
        }
        "cleanup" {
            Write-Info "–û—á–∏—Å—Ç–∫–∞ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)"
        }
        "setup" {
            Write-Info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)"
        }
    }
}

# –ó–∞–ø—É—Å–∫
Main
