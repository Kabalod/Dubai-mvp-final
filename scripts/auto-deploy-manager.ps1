# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–ø–ª–æ—è
# –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Üí –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üí –¥–µ–ø–ª–æ–π ‚Üí —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

param(
    [switch]$WatchMode = $false,
    [int]$MaxRetries = 5,
    [int]$WaitSeconds = 60
)

Write-Host "ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –î–ï–ü–õ–û–Ø" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green

$script:deployAttempt = 1
$script:maxRetries = $MaxRetries

function Write-Status {
    param([string]$Message, [string]$Color = "White")
    $timestamp = Get-Date -Format "HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor $Color
}

function Test-BackendHealth {
    try {
        $response = Invoke-RestMethod -Uri "https://workerproject-production.up.railway.app/api/health/" -Method GET -TimeoutSec 10
        return @{ Success = $true; Data = $response }
    } catch {
        return @{ Success = $false; Error = $_.Exception.Message }
    }
}

function Get-RailwayLogs {
    try {
        $logs = npx --yes @railway/cli@latest logs 2>&1
        return $logs -join "`n"
    } catch {
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏: $($_.Exception.Message)"
    }
}

function Find-MissingDependencies {
    param([string]$LogText)
    
    $dependencies = @()
    $patterns = @{
        "No module named '([^']+)'" = '$1'
        "ModuleNotFoundError: No module named '([^']+)'" = '$1'
        "ImportError: No module named ([^\s]+)" = '$1'
    }
    
    foreach ($pattern in $patterns.Keys) {
        $matches = [regex]::Matches($LogText, $pattern)
        foreach ($match in $matches) {
            $module = $match.Groups[1].Value
            $dependencies += $module
        }
    }
    
    return $dependencies | Sort-Object | Get-Unique
}

function Add-DependencyToDockerfile {
    param([string]$Dependency)
    
    $dockerfilePath = "apps/realty-main/Dockerfile"
    $content = Get-Content $dockerfilePath -Raw
    
    # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å pip install
    $lines = $content -split "`n"
    $lastPipIndex = -1
    
    for ($i = $lines.Count - 1; $i -ge 0; $i--) {
        if ($lines[$i] -match "pip install.*--no-cache-dir") {
            $lastPipIndex = $i
            break
        }
    }
    
    if ($lastPipIndex -ge 0) {
        $lines[$lastPipIndex] = $lines[$lastPipIndex].TrimEnd() + " $Dependency"
        $newContent = $lines -join "`n"
        Set-Content $dockerfilePath $newContent -NoNewline
        return $true
    }
    
    return $false
}

function Deploy-Changes {
    param([string[]]$Dependencies = @())
    
    if ($Dependencies.Count -gt 0) {
        $depList = $Dependencies -join ", "
        $commitMessage = "fix(auto): add missing dependencies: $depList"
    } else {
        $commitMessage = "fix(auto): automated deployment attempt $script:deployAttempt"
    }
    
    Write-Status "üì§ –ö–æ–º–º–∏—Ç –∏ –¥–µ–ø–ª–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π..." "Yellow"
    
    git add -A | Out-Null
    git commit -m $commitMessage | Out-Null
    git push | Out-Null
    
    Write-Status "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Railway" "Green"
}

function Wait-ForDeployment {
    param([int]$TimeoutSeconds = 40)
    
    Write-Status "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ø–ª–æ—è ($TimeoutSeconds —Å–µ–∫)..." "Yellow"
    
    $timeout = (Get-Date).AddSeconds($TimeoutSeconds)
    
    while ((Get-Date) -lt $timeout) {
        Start-Sleep -Seconds 10
        
        $health = Test-BackendHealth
        if ($health.Success) {
            Write-Status "üéâ Backend —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!" "Green"
            Write-Status "–°—Ç–∞—Ç—É—Å: $($health.Data.status)" "White"
            return $true
        }
        
        Write-Status "‚è≥ –í—Å—ë –µ—â—ë –æ–∂–∏–¥–∞–µ–º..." "Yellow"
    }
    
    Write-Status "‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–ø–ª–æ—è" "Red"
    return $false
}

function Run-ComprehensiveCheck {
    Write-Status "üîç –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏..." "Cyan"
    
    try {
        $result = & ".\scripts\comprehensive-check.ps1" 2>&1
        $exitCode = $LASTEXITCODE
        
        if ($exitCode -eq 0) {
            Write-Status "‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞" "Green"
            return @{ Success = $true; Issues = @() }
        } else {
            Write-Status "‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ" "Red"
            return @{ Success = $false; Issues = $result }
        }
    } catch {
        Write-Status "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: $($_.Exception.Message)" "Red"
        return @{ Success = $false; Issues = @() }
    }
}

function Start-AutoDeployment {
    Write-Status "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π (–ø–æ–ø—ã—Ç–∫–∞ $script:deployAttempt/$script:maxRetries)" "Cyan"
    
    # 1. –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    $check = Run-ComprehensiveCheck
    if (-not $check.Success) {
        Write-Status "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..." "Yellow"
    }
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    $health = Test-BackendHealth
    if ($health.Success) {
        Write-Status "‚úÖ Backend —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!" "Green"
        return $true
    }
    
    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    Write-Status "üìã –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ Railway..." "Cyan"
    $logs = Get-RailwayLogs
    
    # 4. –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    $missingDeps = Find-MissingDependencies -LogText $logs
    
    if ($missingDeps.Count -gt 0) {
        Write-Status "üîß –ù–∞–π–¥–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: $($missingDeps -join ', ')" "Yellow"
        
        foreach ($dep in $missingDeps) {
            if (Add-DependencyToDockerfile -Dependency $dep) {
                Write-Status "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: $dep" "Green"
            }
        }
        
        Deploy-Changes -Dependencies $missingDeps
    } else {
        Write-Status "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è..." "Yellow"
        Deploy-Changes
    }
    
    # 5. –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    $deploySuccess = Wait-ForDeployment -TimeoutSeconds 40
    
    if ($deploySuccess) {
        Write-Status "üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω!" "Green"
        return $true
    } else {
        Write-Status "‚ùå –î–µ–ø–ª–æ–π –Ω–µ —É–¥–∞–ª—Å—è" "Red"
        return $false
    }
}

function Start-WatchMode {
    Write-Status "üëÅÔ∏è –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..." "Cyan"
    
    while ($true) {
        $health = Test-BackendHealth
        
        if (-not $health.Success) {
            Write-Status "‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ..." "Red"
            
            $success = Start-AutoDeployment
            if (-not $success) {
                Write-Status "‚ö†Ô∏è –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ $WaitSeconds —Å–µ–∫..." "Yellow"
            }
        } else {
            Write-Status "‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ" "Green"
        }
        
        Start-Sleep -Seconds $WaitSeconds
    }
}

# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
try {
    if ($WatchMode) {
        Start-WatchMode
    } else {
        # –¶–∏–∫–ª –ø–æ–ø—ã—Ç–æ–∫ –¥–µ–ø–ª–æ—è
        while ($script:deployAttempt -le $script:maxRetries) {
            $success = Start-AutoDeployment
            
            if ($success) {
                Write-Status "üéâ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û!" "Green"
                
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                Write-Status "üß™ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..." "Cyan"
                Write-Status "Backend: https://workerproject-production.up.railway.app/api/health/" "White"
                Write-Status "Frontend: https://frontend-production-5c48.up.railway.app/auth" "White"
                Write-Status "OTP Test: –í–≤–µ–¥–∏—Ç–µ kbalodk@gmail.com –∏ –Ω–∞–∂–º–∏—Ç–µ SIGN UP" "White"
                
                exit 0
            }
            
            $script:deployAttempt++
            
            if ($script:deployAttempt -le $script:maxRetries) {
                Write-Status "üîÑ –ü–æ–ø—ã—Ç–∫–∞ $script:deployAttempt –∏–∑ $script:maxRetries —á–µ—Ä–µ–∑ 30 —Å–µ–∫..." "Yellow"
                Start-Sleep -Seconds 30
            }
        }
        
        Write-Status "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ($script:maxRetries)" "Red"
        Write-Status "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É:" "Yellow"
        Write-Status "   .\scripts\comprehensive-check.ps1" "White"
        Write-Status "   .\scripts\railway-health-check.ps1" "White"
        
        exit 1
    }
} catch {
    Write-Status "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $($_.Exception.Message)" "Red"
    exit 1
}
