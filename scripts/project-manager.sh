#!/bin/bash

# üöÄ Dubai Project Manager
# –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "\n${CYAN}üöÄ $1${NC}"
    echo -e "${CYAN}$(printf '=%.0s' $(seq 1 $((${#1} + 4))))${NC}"
}

print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${WHITE}‚ÑπÔ∏è  $1${NC}"
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
ACTION=${1:-"status"}
SERVICE=${2:-"all"}
FORCE=${3:-""}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
declare -A SERVICES
SERVICES=(
    [core]="Core Services:docker-compose.core.yml:8000,8001,8002:–û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Å–µ—Ä–≤–∏—Å—ã (–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)"
    [ai]="AI Services:docker-compose.ai.yml:8081,8082,8083:–ò–ò —Å–µ—Ä–≤–∏—Å—ã (–ø–∞–º—è—Ç—å, –∞–≥–µ–Ω—Ç—ã, ML –º–æ–¥–µ–ª–∏)"
    [frontend]="Frontend:docker-compose.frontend.yml:3000,3001,3002:–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
    [infrastructure]="Infrastructure:docker-compose.infrastructure.yml:5432,6379,8080:–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫—ç—à, API gateway"
    [monitoring]="Monitoring:docker-compose.monitoring.yml:9090,3001,5601:–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–µ—Ç—Ä–∏–∫–∏"
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    if command -v docker &> /dev/null; then
        print_status "Docker –Ω–∞–π–¥–µ–Ω"
        return 0
    else
        print_error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
check_docker_compose() {
    if command -v docker-compose &> /dev/null || docker compose version &> /dev/null; then
        print_status "Docker Compose –Ω–∞–π–¥–µ–Ω"
        return 0
    else
        print_error "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    local ports=(${1//,/ })
    print_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
    
    local conflicts=()
    for port in "${ports[@]}"; do
        if netstat -tuln 2>/dev/null | grep -q ":$port "; then
            print_warning "–ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç"
            conflicts+=("$port")
        fi
    done
    
    if [ ${#conflicts[@]} -eq 0 ]; then
        print_status "–í—Å–µ –ø–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã"
        return 0
    else
        print_warning "–ù–∞–π–¥–µ–Ω–æ ${#conflicts[@]} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Ä—Ç–æ–≤"
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
start_service() {
    local service_name=$1
    local service_info=${SERVICES[$service_name]}
    
    if [ -z "$service_info" ]; then
        print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: $service_name"
        return
    fi
    
    IFS=':' read -r service_display compose_file ports description <<< "$service_info"
    
    print_header "–ó–∞–ø—É—Å–∫ $service_display"
    print_info "$description"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    if ! check_ports "$ports"; then
        print_warning "–í–æ–∑–º–æ–∂–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ—Ä—Ç–æ–≤"
        if [ "$FORCE" != "force" ]; then
            print_error "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'force' –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"
            return
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ compose —Ñ–∞–π–ª–∞
    local compose_path="../infrastructure/docker/$compose_file"
    if [ ! -f "$compose_path" ]; then
        print_warning "Compose —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $compose_path"
        print_info "–°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π compose —Ñ–∞–π–ª..."
        create_docker_compose_file "$service_name" "$compose_path" "$ports"
    fi
    
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker Compose
    if command -v docker-compose &> /dev/null; then
        docker-compose -f "$compose_path" up -d
    else
        docker compose -f "$compose_path" up -d
    fi
    
    print_status "$service_display –∑–∞–ø—É—â–µ–Ω"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
stop_service() {
    local service_name=$1
    local service_info=${SERVICES[$service_name]}
    
    if [ -z "$service_info" ]; then
        print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: $service_name"
        return
    fi
    
    IFS=':' read -r service_display compose_file ports description <<< "$service_info"
    
    print_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ $service_display"
    
    local compose_path="../infrastructure/docker/$compose_file"
    if [ -f "$compose_path" ]; then
        if command -v docker-compose &> /dev/null; then
            docker-compose -f "$compose_path" down
        else
            docker compose -f "$compose_path" down
        fi
        print_status "$service_display –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_warning "Compose —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $compose_path"
    fi
}

# –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
get_service_status() {
    print_header "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ Dubai Project"
    
    for service_name in "${!SERVICES[@]}"; do
        local service_info=${SERVICES[$service_name]}
        IFS=':' read -r service_display compose_file ports description <<< "$service_info"
        
        echo -e "\n${CYAN}üìä $service_display${NC}"
        echo -e "   ${WHITE}–û–ø–∏—Å–∞–Ω–∏–µ: $description${NC}"
        echo -e "   ${WHITE}–ü–æ—Ä—Ç: $ports${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        local compose_path="../infrastructure/docker/$compose_file"
        if [ -f "$compose_path" ]; then
            if command -v docker-compose &> /dev/null; then
                local containers=$(docker-compose -f "$compose_path" ps --format json 2>/dev/null || echo "")
            else
                local containers=$(docker compose -f "$compose_path" ps --format json 2>/dev/null || echo "")
            fi
            
            if [ -n "$containers" ]; then
                echo "$containers" | while IFS= read -r container; do
                    if [ -n "$container" ]; then
                        local service=$(echo "$container" | grep -o '"Service":"[^"]*"' | cut -d'"' -f4)
                        local state=$(echo "$container" | grep -o '"State":"[^"]*"' | cut -d'"' -f4)
                        
                        if [ "$state" = "running" ]; then
                            echo -e "   üü¢ $service: $state${NC}"
                        else
                            echo -e "   üî¥ $service: $state${NC}"
                        fi
                    fi
                done
            else
                echo -e "   ${YELLOW}‚ö™ –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤${NC}"
            fi
        else
            echo -e "   ${YELLOW}üìÅ Compose —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        fi
    done
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ compose —Ñ–∞–π–ª–∞
create_docker_compose_file() {
    local service_name=$1
    local compose_path=$2
    local ports=$3
    
    local first_port=$(echo "$ports" | cut -d',' -f1)
    
    mkdir -p "$(dirname "$compose_path")"
    
    cat > "$compose_path" << EOF
version: '3.8'

services:
  ${service_name}-service:
    image: nginx:alpine
    container_name: dubai-${service_name}
    ports:
      - "$first_port:80"
    volumes:
      - ./logs:/var/log/nginx
    restart: unless-stopped

networks:
  default:
    name: dubai-${service_name}-network
EOF
    
    print_status "–°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π compose —Ñ–∞–π–ª: $compose_path"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    print_header "Dubai Project Manager"
    echo -e "${YELLOW}–î–µ–π—Å—Ç–≤–∏–µ: $ACTION${NC}"
    echo -e "${YELLOW}–°–µ—Ä–≤–∏—Å: $SERVICE${NC}"
    echo -e "${YELLOW}–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ: $FORCE${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if ! check_docker; then
        exit 1
    fi
    
    if ! check_docker_compose; then
        exit 1
    fi
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    case $ACTION in
        "start")
            if [ "$SERVICE" = "all" ]; then
                for service_name in "${!SERVICES[@]}"; do
                    start_service "$service_name"
                done
            else
                start_service "$SERVICE"
            fi
            ;;
        "stop")
            if [ "$SERVICE" = "all" ]; then
                for service_name in "${!SERVICES[@]}"; do
                    stop_service "$service_name"
                done
            else
                stop_service "$SERVICE"
            fi
            ;;
        "restart")
            if [ "$SERVICE" = "all" ]; then
                for service_name in "${!SERVICES[@]}"; do
                    stop_service "$service_name"
                    sleep 2
                    start_service "$service_name"
                done
            else
                stop_service "$SERVICE"
                sleep 2
                start_service "$SERVICE"
            fi
            ;;
        "status")
            get_service_status
            ;;
        "logs")
            print_info "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)"
            ;;
        "cleanup")
            print_info "–û—á–∏—Å—Ç–∫–∞ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)"
            ;;
        "setup")
            print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)"
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: $ACTION"
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: start, stop, restart, status, logs, cleanup, setup"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main
