# –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ DUBAI_MVP
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏

param(
    [switch]$AutoFix = $false,
    [switch]$Verbose = $false
)

Write-Host "üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ï–ö–¢–ê DUBAI_MVP" -ForegroundColor Green
Write-Host "=========================================" -ForegroundColor Green

$errors = @()
$warnings = @()
$fixes = @()

# 1. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê
Write-Host "`nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..." -ForegroundColor Cyan

$requiredFiles = @(
    "apps/realty-main/Dockerfile",
    "apps/realty-main/realty/settings_railway.py",
    "apps/realty-main/realty/api/views.py",
    "apps/realty-main/realty/api/urls.py",
    "apps/realty-main/realty/api/models.py",
    "apps/DXB-frontend-develop/Dockerfile",
    "apps/DXB-frontend-develop/package.json"
)

foreach ($file in $requiredFiles) {
    if (!(Test-Path $file)) {
        $errors += "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: $file"
    } else {
        Write-Host "‚úÖ $file" -ForegroundColor Green
    }
}

# 2. –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –í PYTHON
Write-Host "`nüêç –ê–Ω–∞–ª–∏–∑ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." -ForegroundColor Cyan

$pythonFiles = Get-ChildItem -Path "apps/realty-main" -Recurse -Filter "*.py" | Where-Object { $_.Name -ne "__pycache__" }
$allImports = @()

foreach ($file in $pythonFiles) {
    $content = Get-Content $file.FullName -ErrorAction SilentlyContinue
    if ($content) {
        $imports = $content | Select-String "^from ([a-zA-Z_][a-zA-Z0-9_\.]*)" | ForEach-Object { 
            $_.Matches[0].Groups[1].Value 
        }
        $imports += $content | Select-String "^import ([a-zA-Z_][a-zA-Z0-9_\.]*)" | ForEach-Object { 
            $_.Matches[0].Groups[1].Value 
        }
        $allImports += $imports
    }
}

# –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
$problematicModules = @(
    "falco", "django_litestream", "django_tasks", "django_lifecycle", 
    "django_extensions", "django_health_check", "strawberry_django",
    "unique_user_email", "crispy_forms", "crispy_tailwind", "debug_toolbar",
    "allauth", "diskcache", "dateutil", "sentry_sdk"
)

$dockerfilePath = "apps/realty-main/Dockerfile"
$dockerfileContent = Get-Content $dockerfilePath -Raw

Write-Host "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –∫–æ–¥–µ:" -ForegroundColor Yellow
$uniqueImports = $allImports | Sort-Object | Get-Unique | Where-Object { $_ -and $_.Length -gt 0 }

foreach ($import in $uniqueImports) {
    $isProblematic = $problematicModules | Where-Object { $import.StartsWith($_) }
    if ($isProblematic) {
        if ($dockerfileContent -notmatch $isProblematic) {
            $errors += "‚ùå –ú–æ–¥—É–ª—å '$import' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Dockerfile"
        } else {
            Write-Host "‚ö†Ô∏è  $import (–≤ Dockerfile)" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚úÖ $import" -ForegroundColor Green
    }
}

# 3. –ü–†–û–í–ï–†–ö–ê DJANGO SETTINGS
Write-Host "`n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ Django –Ω–∞—Å—Ç—Ä–æ–µ–∫..." -ForegroundColor Cyan

$settingsPath = "apps/realty-main/realty/settings.py"
$settingsContent = Get-Content $settingsPath -Raw

# –ü—Ä–æ–≤–µ—Ä–∫–∞ INSTALLED_APPS
$installedAppsMatch = [regex]::Match($settingsContent, 'INSTALLED_APPS\s*=\s*LOCAL_APPS\s*\+\s*THIRD_PARTY_APPS\s*\+\s*DJANGO_APPS')
if ($installedAppsMatch.Success) {
    Write-Host "‚úÖ INSTALLED_APPS —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ INSTALLED_APPS"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
$problematicRefs = @(
    "falco\.db_routers\.DBTaskRouter",
    "from falco",
    "import falco",
    "from realty\.pfimport",
    "from realty\.reports",
    "from realty\.building_reports"
)

foreach ($ref in $problematicRefs) {
    if ($settingsContent -match $ref) {
        $errors += "‚ùå –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤ settings.py: $ref"
    }
}

# 4. –ü–†–û–í–ï–†–ö–ê API VIEWS
Write-Host "`nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API views..." -ForegroundColor Cyan

$viewsPath = "apps/realty-main/realty/api/views.py"
$viewsContent = Get-Content $viewsPath -Raw

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ views
$problematicViewImports = @(
    "from realty\.pfimport\.models",
    "from realty\.reports\.models",
    "PFListSale", "PFListRent", "BuildingReport"
)

foreach ($import in $problematicViewImports) {
    if ($viewsContent -match $import -and $viewsContent -notmatch "#.*$import") {
        $errors += "‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤ views.py: $import"
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health_check —Ñ—É–Ω–∫—Ü–∏–∏
if ($viewsContent -match "def health_check") {
    Write-Host "‚úÖ health_check endpoint –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green
} else {
    $errors += "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç health_check endpoint"
}

# 5. –ü–†–û–í–ï–†–ö–ê FRONTEND
Write-Host "`n‚öõÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend..." -ForegroundColor Cyan

$frontendPackageJson = "apps/DXB-frontend-develop/package.json"
if (Test-Path $frontendPackageJson) {
    $packageContent = Get-Content $frontendPackageJson | ConvertFrom-Json
    Write-Host "‚úÖ Frontend package.json –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green
    Write-Host "   –ù–∞–∑–≤–∞–Ω–∏–µ: $($packageContent.name)" -ForegroundColor White
    Write-Host "   –í–µ—Ä—Å–∏—è: $($packageContent.version)" -ForegroundColor White
} else {
    $errors += "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç frontend package.json"
}

# 6. –ü–†–û–í–ï–†–ö–ê DOCKER –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
Write-Host "`nüê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." -ForegroundColor Cyan

# Backend Dockerfile
if ($dockerfileContent -match "FROM python:3\.11-slim") {
    Write-Host "‚úÖ Backend Dockerfile –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Python 3.11-slim" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è Backend Dockerfile –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π Python 3.11-slim"
}

if ($dockerfileContent -match "pip install.*psycopg\[binary\]") {
    Write-Host "‚úÖ PostgreSQL –¥—Ä–∞–π–≤–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Green
} else {
    $errors += "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç psycopg[binary] –≤ Dockerfile"
}

# Frontend Dockerfile
$frontendDockerfile = "apps/DXB-frontend-develop/Dockerfile"
if (Test-Path $frontendDockerfile) {
    $frontendDockerContent = Get-Content $frontendDockerfile -Raw
    if ($frontendDockerContent -match "yarn install" -or $frontendDockerContent -match "npm install") {
        Write-Host "‚úÖ Frontend Dockerfile –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Å–±–æ—Ä–∫–∏" -ForegroundColor Green
    } else {
        $warnings += "‚ö†Ô∏è Frontend Dockerfile –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º"
    }
}

# 7. –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô
Write-Host "`nüí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π..." -ForegroundColor Cyan

if ($errors.Count -eq 0 -and $warnings.Count -eq 0) {
    Write-Host "üéâ –ü–†–û–ï–ö–¢ –í –û–¢–õ–ò–ß–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò!" -ForegroundColor Green
    Write-Host "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ." -ForegroundColor Green
} else {
    Write-Host "`nüìã –û–¢–ß–Å–¢ –û –ü–†–û–ë–õ–ï–ú–ê–•:" -ForegroundColor Red
    
    if ($errors.Count -gt 0) {
        Write-Host "`nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò ($($errors.Count)):" -ForegroundColor Red
        $errors | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
    }
    
    if ($warnings.Count -gt 0) {
        Write-Host "`n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ($($warnings.Count)):" -ForegroundColor Yellow
        $warnings | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
    }
}

# 8. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø
if ($AutoFix -and $errors.Count -gt 0) {
    Write-Host "`nüîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø..." -ForegroundColor Magenta
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    Write-Host "–§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏" -ForegroundColor Yellow
}

# 9. –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
Write-Host "`nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:" -ForegroundColor Cyan
Write-Host "  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: $($errors.Count)" -ForegroundColor $(if ($errors.Count -eq 0) { "Green" } else { "Red" })
Write-Host "  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $($warnings.Count)" -ForegroundColor $(if ($warnings.Count -eq 0) { "Green" } else { "Yellow" })
Write-Host "  –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: $($requiredFiles.Count)" -ForegroundColor White
Write-Host "  –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã: $($uniqueImports.Count)" -ForegroundColor White

Write-Host "`nüèÅ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -ForegroundColor Green

# –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ –æ—à–∏–±–∫–∏ –¥–ª—è CI/CD
if ($errors.Count -gt 0) {
    exit 1
} else {
    exit 0
}
