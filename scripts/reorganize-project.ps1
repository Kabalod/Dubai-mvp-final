# üîÑ Dubai Project - –†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É

param(
    [switch]$DryRun,
    [switch]$Force,
    [switch]$Verbose
)

$ErrorActionPreference = 'Stop'

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Colors = @{
    Red = 'Red'
    Green = 'Green'
    Yellow = 'Yellow'
    Cyan = 'Cyan'
    White = 'White'
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
function Write-Header {
    param([string]$Message)
    Write-Host "`nüîÑ $Message" -ForegroundColor $Colors.Cyan
    Write-Host ("=" * ($Message.Length + 4)) -ForegroundColor $Colors.Cyan
}

function Write-Status {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor $Colors.Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor $Colors.Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor $Colors.Red
}

function Write-Info {
    param([string]$Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor $Colors.White
}

# –ü–ª–∞–Ω —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
$ReorganizationPlan = @{
    "realty-main" = @{
        destination = "core\real_estate\realty"
        description = "–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
        type = "core"
    }
    "pfimport-main" = @{
        destination = "core\data_processing\pfimport"
        description = "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö Property Finder"
        type = "core"
    }
    "DXB-frontend-develop" = @{
        destination = "frontend\dxb"
        description = "React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        type = "frontend"
    }
    "Java_Memory_LLM-master" = @{
        destination = "ai_services\memory\java-llm"
        description = "Java LLM —Å–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏"
        type = "ai"
    }
    "compose-for-agents" = @{
        destination = "ai_services\agents\compose"
        description = "Docker Compose –¥–ª—è AI –∞–≥–µ–Ω—Ç–æ–≤"
        type = "ai"
    }
    "services" = @{
        destination = "infrastructure\services"
        description = "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
        type = "infrastructure"
    }
    "tools" = @{
        destination = "tools"
        description = "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        type = "tools"
    }
    "configs" = @{
        destination = "infrastructure\configs"
        description = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
        type = "infrastructure"
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫
function Test-ProjectFolders {
    Write-Info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤..."
    
    $existingProjects = @()
    $missingProjects = @()
    
    foreach ($project in $ReorganizationPlan.Keys) {
        if (Test-Path $project) {
            $existingProjects += $project
            Write-Status "–ù–∞–π–¥–µ–Ω: $project"
        }
        else {
            $missingProjects += $project
            Write-Warning "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: $project"
        }
    }
    
    Write-Host ""
    Write-Info "–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: $($existingProjects.Count)"
    Write-Info "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤: $($missingProjects.Count)"
    
    return $existingProjects
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
function Create-FolderStructure {
    Write-Info "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫..."
    
    $folders = @(
        "core\real_estate",
        "core\analytics", 
        "core\data_processing",
        "ai_services\memory",
        "ai_services\agents",
        "ai_services\ml_models",
        "frontend",
        "infrastructure\docker",
        "infrastructure\monitoring",
        "infrastructure\deployment",
        "infrastructure\services",
        "infrastructure\configs",
        "tools",
        "scripts",
        "env",
        "logs"
    )
    
    foreach ($folder in $folders) {
        if (-not (Test-Path $folder)) {
            New-Item -Path $folder -ItemType Directory -Force | Out-Null
            Write-Status "–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: $folder"
        }
        else {
            Write-Info "–ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $folder"
        }
    }
}

# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
function Move-Project {
    param(
        [string]$Source,
        [string]$Destination,
        [string]$Description
    )
    
    Write-Info "üì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ: $Source ‚Üí $Destination"
    Write-Info "–û–ø–∏—Å–∞–Ω–∏–µ: $Description"
    
    if ($DryRun) {
        Write-Warning "DRY RUN: –ü—Ä–æ–µ–∫—Ç –ù–ï –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω"
        return
    }
    
    try {
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if (-not (Test-Path $Source)) {
            Write-Error "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: $Source"
            return
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        if (Test-Path $Destination) {
            if ($Force) {
                Write-Warning "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º: $Destination"
                Remove-Item -Path $Destination -Recurse -Force
            }
            else {
                Write-Error "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $Destination"
                Write-Info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Force –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏"
                return
            }
        }
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏
        $parentFolder = Split-Path $Destination -Parent
        if (-not (Test-Path $parentFolder)) {
            New-Item -Path $parentFolder -ItemType Directory -Force | Out-Null
        }
        
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        Move-Item -Path $Source -Destination $Destination -Force
        Write-Status "–ü—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω: $Source ‚Üí $Destination"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ README –≤ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
        $readmePath = Join-Path $Destination "README.md"
        if (-not (Test-Path $readmePath)) {
            $readmeContent = @"
# $Description

–ü–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑: `$Source`

## –û–ø–∏—Å–∞–Ω–∏–µ
$Description

## –°—Ç–∞—Ç—É—Å
- ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
- üìÖ –î–∞—Ç–∞: $(Get-Date -Format "dd.MM.yyyy")
- üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–º —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
1. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
3. –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"@
            $readmeContent | Out-File -FilePath $readmePath -Encoding UTF8
            Write-Status "–°–æ–∑–¥–∞–Ω README: $readmePath"
        }
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è $Source`: $_"
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ Docker Compose —Ñ–∞–π–ª–æ–≤
function Create-DockerComposeFiles {
    Write-Info "üê≥ –°–æ–∑–¥–∞–Ω–∏–µ Docker Compose —Ñ–∞–π–ª–æ–≤..."
    
    $composeFiles = @{
        "core" = @{
            file = "infrastructure\docker\docker-compose.core.yml"
            services = @("real-estate-api", "analytics-service", "data-processor")
            ports = @(8000, 8001, 8002)
        }
        "ai" = @{
            file = "infrastructure\docker\docker-compose.ai.yml"
            services = @("memory-service", "agent-service", "ml-service")
            ports = @(8081, 8082, 8083)
        }
        "frontend" = @{
            file = "infrastructure\docker\docker-compose.frontend.yml"
            services = @("dxb-frontend", "frontend-api")
            ports = @(3000, 3001)
        }
        "infrastructure" = @{
            file = "infrastructure\docker\docker-compose.infrastructure.yml"
            services = @("postgres", "redis", "nginx")
            ports = @(5432, 6379, 8080)
        }
        "monitoring" = @{
            file = "infrastructure\docker\docker-compose.monitoring.yml"
            services = @("prometheus", "grafana", "elasticsearch", "kibana")
            ports = @(9090, 3001, 9200, 5601)
        }
    }
    
    foreach ($type in $composeFiles.Keys) {
        $config = $composeFiles[$type]
        $filePath = $config.file
        
        if (-not (Test-Path $filePath)) {
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            $servicesContent = ""
            foreach ($service in $config.services) {
                $serviceName = $service
                $servicesContent += "  $serviceName:`n"
                $servicesContent += "    image: nginx:alpine`n"
                $servicesContent += "    container_name: dubai-$serviceName`n"
                $servicesContent += "    ports:`n"
                $servicesContent += "      - `"$($config.ports[0]):80`"`n"
                $servicesContent += "    volumes:`n"
                $servicesContent += "      - ./logs:/var/log/nginx`n"
                $servicesContent += "    restart: unless-stopped`n`n"
            }
            
            $content = @"
version: '3.8'

services:
$servicesContent
networks:
  default:
    name: dubai-$type-network
"@
            
            try {
                New-Item -Path (Split-Path $filePath) -ItemType Directory -Force | Out-Null
                $content | Out-File -FilePath $filePath -Encoding UTF8
                Write-Status "–°–æ–∑–¥–∞–Ω Docker Compose: $filePath"
            }
            catch {
                Write-Error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è $filePath`: $_"
            }
        }
        else {
            Write-Info "Docker Compose —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $filePath"
        }
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function Create-EnvironmentFiles {
    Write-Info "üîê –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    $envFiles = @{
        "env\.env.development" = @"
# Development Environment
NODE_ENV=development
DEBUG=true
LOG_LEVEL=debug

# Database
DB_HOST=localhost
DB_PORT=5432
DB_NAME=dubai_dev
DB_USER=dubai_user
DB_PASSWORD=dubai_pass

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379

# AI Services
AI_MEMORY_URL=http://localhost:8081
AI_AGENTS_URL=http://localhost:8082
AI_ML_URL=http://localhost:8083

# Frontend
FRONTEND_PORT=3000
FRONTEND_API_URL=http://localhost:8000

# Monitoring
PROMETHEUS_PORT=9090
GRAFANA_PORT=3001
"@
        
        "env\.env.production" = @"
# Production Environment
NODE_ENV=production
DEBUG=false
LOG_LEVEL=info

# Database
DB_HOST=postgres
DB_PORT=5432
DB_NAME=dubai_prod
DB_USER=dubai_user
DB_PASSWORD=dubai_pass

# Redis
REDIS_HOST=redis
REDIS_PORT=6379

# AI Services
AI_MEMORY_URL=http://ai-memory-service:8081
AI_AGENTS_URL=http://ai-agents-service:8082
AI_ML_URL=http://ai-ml-service:8083

# Frontend
FRONTEND_PORT=3000
FRONTEND_API_URL=http://api-gateway:8000

# Monitoring
PROMETHEUS_PORT=9090
GRAFANA_PORT=3001
"@
    }
    
    foreach ($filePath in $envFiles.Keys) {
        if (-not (Test-Path $filePath)) {
            try {
                New-Item -Path (Split-Path $filePath) -ItemType Directory -Force | Out-Null
                $envFiles[$filePath] | Out-File -FilePath $filePath -Encoding UTF8
                Write-Status "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è: $filePath"
            }
            catch {
                Write-Error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è $filePath`: $_"
            }
        }
        else {
            Write-Info "–§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $filePath"
        }
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-Header "Dubai Project - –†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"
    Write-Host "–†–µ–∂–∏–º: $($DryRun ? 'DRY RUN' : '–†–ï–ê–õ–¨–ù–û–ï –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï')" -ForegroundColor $Colors.Yellow
    Write-Host "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ: $Force" -ForegroundColor $Colors.Yellow
    Write-Host "–ü–æ–¥—Ä–æ–±–Ω–æ: $Verbose" -ForegroundColor $Colors.Yellow
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    $existingProjects = Test-ProjectFolders
    
    if ($existingProjects.Count -eq 0) {
        Write-Error "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
        return
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
    Create-FolderStructure
    
    # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
    Write-Header "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤"
    
    foreach ($project in $existingProjects) {
        $plan = $ReorganizationPlan[$project]
        Move-Project -Source $project -Destination $plan.destination -Description $plan.description
        Write-Host ""
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Docker Compose —Ñ–∞–π–ª–æ–≤
    Create-DockerComposeFiles
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    Create-EnvironmentFiles
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    Write-Header "–†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    Write-Status "–ü—Ä–æ–µ–∫—Ç —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
    
    if ($DryRun) {
        Write-Warning "–≠—Ç–æ –±—ã–ª DRY RUN - –Ω–∏–∫–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã"
        Write-Info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –±–µ–∑ -DryRun –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"
    }
    
    Write-Host ""
    Write-Host "üìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor $Colors.Cyan
    Write-Host "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫"
    Write-Host "2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    Write-Host "3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
    Write-Host "4. –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    Write-Host "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ project-manager.ps1 –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
}

# –ó–∞–ø—É—Å–∫
Main
