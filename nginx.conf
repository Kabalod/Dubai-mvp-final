server {
  listen 80;
  server_name _;

  # DNS-резолвер для прокси запросов с расширенными настройками
  resolver 1.1.1.1 8.8.8.8 127.0.0.11 ipv6=off valid=10s;
  resolver_timeout 5s;

  # Корневая директория для React приложения
  root /usr/share/nginx/html;
  index index.html;

  # Gzip сжатие
  gzip on;
  gzip_vary on;
  gzip_min_length 1024;
  gzip_proxied any;
  gzip_comp_level 6;
  gzip_types
    text/plain
    text/css
    text/xml
    text/javascript
    application/json
    application/javascript
    application/xml+rss
    application/atom+xml
    image/svg+xml;

  # Backend сервис с портом для Railway internal networking
  set $backend_url "backend.railway.internal:8000";
  # Если сервис назван по-другому, измените на правильное имя

  # Auth endpoints - теперь проксируем к реальному backend
  location /api/auth/ {
    add_header Access-Control-Allow-Origin * always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
    
    if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        add_header Access-Control-Max-Age 86400;
        return 204;
    }
    
    # Временно возвращаем mock пока исправляем Django 500 ошибку
    return 503 '{"error": "Django 500 error", "message": "Backend process running but Django fails", "action": "check_environment_variables"}';
  }

  # Остальные API endpoints - проксируем к backend (он уже работает!)
  location /api/ {
    add_header Access-Control-Allow-Origin * always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
    
    if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        add_header Access-Control-Max-Age 86400;
        return 204;
    }
    
    # Временно mock пока Django исправляется
    return 200 '{"status": "ok", "message": "Backend process running, Django needs environment variables", "gunicorn": "active"}';
  }

  # Кеширование статических файлов
  location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    try_files $uri =404;
  }

  # Основной маршрут - SPA
  location / {
    try_files $uri $uri/ /index.html;
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header Pragma "no-cache";
    add_header Expires "0";
  }

  # Health check
  location /health {
    access_log off;
    return 200 "healthy\n";
    add_header Content-Type text/plain;
  }
}