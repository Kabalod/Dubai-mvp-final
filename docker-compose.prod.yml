version: '3.8'

# ========================================
# Production Docker Compose Configuration
# ========================================

services:
  # ========================================
  # PostgreSQL Database (Production)
  # ========================================
  postgres:
    image: postgres:16-alpine
    container_name: prod-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./backups:/backups
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-dubai_realty}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========================================
  # Redis Cache (Production)
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: prod-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========================================
  # Parser Service (Production)
  # ========================================
  parser-service:
    build:
      context: ./apps/pfimport-main
      dockerfile: Dockerfile
    container_name: prod-parser
    ports:
      - "${PARSER_PORT:-8002}:8000"
    volumes:
      - ./shared-data:/shared-data
      - parser_logs:/app/logs
    environment:
      - DEBUG=0
      - DJANGO_ALLOWED_HOSTS=${PARSER_ALLOWED_HOSTS:-parser-service,localhost}
      - SECRET_KEY=${PARSER_SECRET_KEY}
      - LOG_LEVEL=INFO
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 60s
      timeout: 15s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ========================================
  # API Service (Production)
  # ========================================
  api-service:
    build:
      context: ./apps/realty-main
      dockerfile: Dockerfile
    container_name: prod-api
    volumes:
      - ./shared-data:/shared-data
      - api_media:/app/media
      - api_static:/app/static
      - api_logs:/app/logs
    ports:
      - "${API_PORT:-8090}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DEBUG=0
      - DJANGO_ALLOWED_HOSTS=${API_ALLOWED_HOSTS:-api-service,localhost,127.0.0.1,yourdomain.com}
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-dubai_realty}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${API_SECRET_KEY}
      - CORS_ALLOWED_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost,https://yourdomain.com}
      - LOG_LEVEL=INFO
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 15s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ========================================
  # Frontend (Production Build)
  # ========================================
  frontend:
    build:
      context: ./apps/DXB-frontend-develop
      dockerfile: Dockerfile
    container_name: prod-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${FRONTEND_API_URL:-https://yourdomain.com}
    depends_on:
      - api-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========================================
  # Nginx Load Balancer (Production)
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: prod-nginx
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - api_static:/var/www/static:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api-service
      - frontend
      - parser-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # Prometheus Monitoring (Production)
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prod-prometheus
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles: ["monitoring"]

  # ========================================
  # Grafana Dashboard (Production)
  # ========================================
  grafana:
    image: grafana/grafana:latest
    container_name: prod-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    ports:
      - "${GRAFANA_PORT:-3003}:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles: ["monitoring"]

# ========================================
# Volumes (Production)
# ========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  api_media:
    driver: local
  api_static:
    driver: local
  api_logs:
    driver: local
  parser_logs:
    driver: local
  nginx_logs:
    driver: local

# ========================================
# Networks (Production)
# ========================================
networks:
  default:
    name: dubai-prod-network
    driver: bridge