# Generated by Gemini AI by merging PRs #7, #8, #12
import json
from datetime import datetime, timedelta
from urllib.parse import urlencode
import secrets
import string

# Optional import for Stripe (not required for MVP development)
try:
    import stripe
except ImportError:
    stripe = None

from django.conf import settings
from django.contrib.auth import get_user_model
from django.utils import timezone
from django.views.decorators.csrf import csrf_exempt
from django.urls import reverse
from django.http import HttpResponseRedirect

from rest_framework import generics, permissions, status
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.pagination import PageNumberPagination

from .models import OTPCode, Payment, PaymentEventAudit
from .serializers import (
    UserSerializer,
    RegisterSerializer,
    OTPLoginSerializer,
    PaymentSerializer,
    PaymentEventAuditSerializer,
    UserProfileSerializer,
)

User = get_user_model()

# --- Health Check ---
def health_check(request):
    from django.http import JsonResponse
    return JsonResponse({"status": "ok", "timestamp": timezone.now().isoformat()})

# --- Authentication Views ---
class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    permission_classes = (permissions.AllowAny,)
    serializer_class = RegisterSerializer

class OTPLoginView(APIView):
    permission_classes = (permissions.AllowAny,)

    def post(self, request, *args, **kwargs):
        serializer = OTPLoginSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        email = serializer.validated_data["email"]
        code = serializer.validated_data["code"]

        try:
            otp = OTPCode.objects.get(
                email=email,
                code=code,
                is_used=False,
                expires_at__gt=timezone.now()
            )
            user, created = User.objects.get_or_create(email=email, defaults={'username': email})
            
            otp.is_used = True
            otp.save()

            refresh = RefreshToken.for_user(user)
            return Response({
                "refresh": str(refresh),
                "access": str(refresh.access_token),
                "user": UserSerializer(user).data
            })
        except OTPCode.DoesNotExist:
            return Response({"error": "Invalid or expired OTP."}, status=status.HTTP_400_BAD_REQUEST)

# --- User Profile Views ---
class UserProfileView(generics.RetrieveUpdateAPIView):
    queryset = User.objects.all()
    serializer_class = UserProfileSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_object(self):
        return self.request.user

# --- Admin Views ---
class StandardResultsSetPagination(PageNumberPagination):
    page_size = 100
    page_size_query_param = 'page_size'
    max_page_size = 1000

class UserProfileAdminView(generics.ListAPIView):
    queryset = User.objects.all().order_by('-date_joined')
    serializer_class = UserProfileSerializer
    permission_classes = [permissions.IsAdminUser]
    pagination_class = StandardResultsSetPagination

class PaymentAdminView(generics.ListAPIView):
    queryset = Payment.objects.all().order_by('-created_at')
    serializer_class = PaymentSerializer
    permission_classes = [permissions.IsAdminUser]
    pagination_class = StandardResultsSetPagination

# --- Stripe Webhook View ---
class StripeWebhookView(APIView):
    permission_classes = [permissions.AllowAny]

    @csrf_exempt
    def post(self, request, *args, **kwargs):
        payload = request.body
        sig_header = request.META.get('HTTP_STRIPE_SIGNATURE')
        endpoint_secret = settings.STRIPE_WEBHOOK_SECRET

        try:
            if not stripe:
                return Response({"error": "Stripe not available"}, status=status.HTTP_501_NOT_IMPLEMENTED)
            event = stripe.Webhook.construct_event(
                payload, sig_header, endpoint_secret
            )
        except ValueError as e:
            # Invalid payload
            return Response(status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:  # Handle both Stripe errors and missing stripe module
            # Invalid signature
            return Response(status=status.HTTP_400_BAD_REQUEST)

        # Audit the event
        audit_entry, created = PaymentEventAudit.objects.get_or_create(
            provider="stripe",
            event_id=event.id,
            defaults={
                'event_type': event.type,
                'payload': json.loads(payload),
            }
        )
        if not created:
            # Event already processed, idempotent response
            return Response(status=status.HTTP_200_OK)

        # Handle the event
        if event.type == 'charge.succeeded':
            charge = event.data.object
            user_email = charge.billing_details.email
            user, _ = User.objects.get_or_create(email=user_email, defaults={'username': user_email})

            payment, p_created = Payment.objects.update_or_create(
                stripe_charge_id=charge.id,
                defaults={
                    'user': user,
                    'amount': charge.amount / 100.0,
                    'currency': charge.currency,
                    'status': charge.status,
                    'description': charge.description,
                }
            )
            audit_entry.related_payment = payment
        
        audit_entry.status = "processed"
        audit_entry.processed_at = timezone.now()
        audit_entry.save()

        return Response(status=status.HTTP_200_OK)


# --- Google OAuth Views ---

class GoogleAuthInitView(APIView):
    """Инициирует Google OAuth процесс - возвращает URL для авторизации"""
    permission_classes = (permissions.AllowAny,)
    
    def get(self, request):
        # Для MVP возвращаем mock auth_url, который редиректит сразу на callback
        callback_url = request.build_absolute_uri('/api/auth/google/callback/')
        
        # Mock Google OAuth - сразу редиректим на callback с mock кодом
        mock_params = {
            'code': 'mock_authorization_code_12345',
            'state': 'mock_state_12345'
        }
        
        mock_auth_url = f"{callback_url}?{urlencode(mock_params)}"
        
        return Response({
            'auth_url': mock_auth_url,
            'state': 'mock_state_12345',
            'message': 'MVP Mock Google OAuth - will auto-login as test user'
        })


class GoogleAuthCallbackView(APIView):
    """Обрабатывает callback от Google OAuth и создает/авторизует пользователя"""
    permission_classes = (permissions.AllowAny,)
    
    def get(self, request):
        # Получаем mock код авторизации
        code = request.GET.get('code', 'mock_authorization_code_12345')
        state = request.GET.get('state', 'mock_state_12345')
        error = request.GET.get('error')
        
        if error:
            return HttpResponseRedirect(f"{settings.FRONTEND_URL}/auth#error={error}")
        
        try:
            # MVP Mock Google OAuth - создаем тестового пользователя
            google_user_data = {
                'email': 'testuser@gmail.com',
                'given_name': 'Google',
                'family_name': 'User',
                'sub': '1234567890'
            }
            
            # Создаем или получаем пользователя
            user, created = User.objects.get_or_create(
                email=google_user_data['email'],
                defaults={
                    'username': google_user_data['email'],
                    'first_name': google_user_data.get('given_name', ''),
                    'last_name': google_user_data.get('family_name', ''),
                    'is_active': True,
                }
            )
            
            # Генерируем JWT токены
            refresh = RefreshToken.for_user(user)
            access_token = refresh.access_token
            
            # Редирект с токенами в hash для frontend
            redirect_url = f"{settings.FRONTEND_URL}/auth#access={access_token}&refresh={refresh}"
            return HttpResponseRedirect(redirect_url)
            
        except Exception as e:
            return HttpResponseRedirect(f"{settings.FRONTEND_URL}/auth#error=oauth_failed")
