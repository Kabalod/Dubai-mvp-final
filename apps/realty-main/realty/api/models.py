# Generated by Gemini AI by merging PRs #7, #8, #12

from django.conf import settings
from django.contrib.auth.models import AbstractUser
from django.db import models


class User(AbstractUser):
    # Дополнительные поля пользователя, если они понадобятся в будущем
    # Например: avatar = models.ImageField(upload_to="avatars/", null=True, blank=True)
    pass


class OTPCode(models.Model):
    email = models.EmailField()
    code = models.CharField(max_length=6)
    created_at = models.DateTimeField(auto_now_add=True)
    expires_at = models.DateTimeField()
    is_used = models.BooleanField(default=False)
    attempts = models.IntegerField(default=0)

    def __str__(self):
        return f"OTP for {self.email} - {self.code}"

    class Meta:
        verbose_name = "OTP Code"
        verbose_name_plural = "OTP Codes"
        ordering = ["-created_at"]
        indexes = [
            models.Index(fields=["email"]),
            models.Index(fields=["created_at"]),
        ]


class Payment(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="payments"
    )
    stripe_charge_id = models.CharField(max_length=100, unique=True)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    currency = models.CharField(max_length=10)
    status = models.CharField(max_length=20, default="succeeded")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    description = models.TextField(blank=True, null=True)

    def __str__(self):
        return f"Payment {self.stripe_charge_id} by {self.user.username}"

    class Meta:
        verbose_name = "Payment"
        verbose_name_plural = "Payments"
        ordering = ["-created_at"]
        indexes = [
            models.Index(fields=["user"]),
            models.Index(fields=["stripe_charge_id"]),
            models.Index(fields=["status"]),
        ]


class PaymentEventAudit(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    provider = models.CharField(max_length=32)
    event_type = models.CharField(max_length=64)
    event_id = models.CharField(max_length=128, unique=True) # Ensure idempotency
    payload = models.JSONField()
    processed_at = models.DateTimeField(null=True, blank=True)
    status = models.CharField(max_length=32, default="received") # received, processed, failed
    error_message = models.TextField(blank=True, null=True)
    related_payment = models.ForeignKey(
        'api.Payment',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='webhook_events'
    )

    def __str__(self):
        return f"{self.provider} Event: {self.event_type} ({self.event_id})"

    class Meta:
        verbose_name = "Payment Event Audit"
        verbose_name_plural = "Payment Event Audits"
        ordering = ["-created_at"]
        indexes = [
            models.Index(fields=["provider", "event_id"]),
            models.Index(fields=["event_type"]),
        ]
