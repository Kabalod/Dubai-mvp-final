#!/bin/bash

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}    Auto Import Script for Realty      ${NC}"
echo -e "${BLUE}========================================${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "docker-compose.yml" ]; then
    log_error "docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω
if ! docker info > /dev/null 2>&1; then
    log_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
if ! docker compose --profile local ps | grep -q "Up"; then
    log_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã. –ó–∞–ø—É—Å–∫–∞–µ–º..."
    docker compose --profile local up -d
    sleep 10  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
if ! docker compose --profile local exec db pg_isready -U postgres > /dev/null 2>&1; then
    log_error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Django –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Django –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
if ! docker compose --profile local exec web python manage.py check > /dev/null 2>&1; then
    log_error "Django –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
    exit 1
fi

# –ò—â–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
log "–ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞..."
DATA_DIRS=()
for dir in scraped_data/scrape_*; do
    if [ -d "$dir" ]; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON —Ñ–∞–π–ª–æ–≤
        if ls "$dir"/*.json > /dev/null 2>&1; then
            DATA_DIRS+=("$dir")
        fi
    fi
done

if [ ${#DATA_DIRS[@]} -eq 0 ]; then
    log_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–µ–π–ø–µ—Ä —Å–Ω–∞—á–∞–ª–∞."
    echo -e "${YELLOW}–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–µ–π–ø–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:${NC}"
    echo -e "  ${GREEN}cd scraper_module && ./run_scraper.sh${NC}"
    exit 1
fi

log "–ù–∞–π–¥–µ–Ω–æ ${#DATA_DIRS[@]} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏:"
for dir in "${DATA_DIRS[@]}"; do
    echo -e "  üìÅ ${dir}"
done

# –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∏–º–ø–æ—Ä—Ç–∞
echo ""
echo -e "${BLUE}–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–º–ø–æ—Ä—Ç–∞:${NC}"
read -p "–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º? (y/N): " -n 1 -r
echo
WIPE_SALE=$([[ $REPLY =~ ^[Yy]$ ]] && echo "--wipe-sale" || echo "")

read -p "–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞—Ä–µ–Ω–¥–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º? (y/N): " -n 1 -r
echo
WIPE_RENT=$([[ $REPLY =~ ^[Yy]$ ]] && echo "--wipe-rent" || echo "")

read -p "–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–π–æ–Ω–∞—Ö –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º? (y/N): " -n 1 -r
echo
WIPE_AREA=$([[ $REPLY =~ ^[Yy]$ ]] && echo "--wipe-area" || echo "")

read -p "–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–¥–∞–Ω–∏—è—Ö –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º? (y/N): " -n 1 -r
echo
WIPE_BUILDING=$([[ $REPLY =~ ^[Yy]$ ]] && echo "--wipe-building" || echo "")

# –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
total_imported = 0
total_errors = 0

for dir in "${DATA_DIRS[@]}"; do
    log "–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ $dir..."
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–º–ø–æ—Ä—Ç–∞
    if docker compose --profile local exec web python manage.py import_properties \
        "/app/$dir" $WIPE_SALE $WIPE_RENT $WIPE_AREA $WIPE_BUILDING; then
        
        total_imported=$((total_imported + 1))
        log "–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ $dir"
        
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        WIPE_SALE=""
        WIPE_RENT=""
        WIPE_AREA=""
        WIPE_BUILDING=""
        
    else
        total_errors=$((total_errors + 1))
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ $dir"
    fi
done

# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
echo ""
echo -e "${BLUE}========================================${NC}"
if [ $total_errors -eq 0 ]; then
    echo -e "${GREEN}‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!${NC}"
    echo -e "${GREEN}–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: $total_imported${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏${NC}"
    echo -e "${GREEN}–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: $total_imported${NC}"
    echo -e "${RED}–û—à–∏–±–æ–∫: $total_errors${NC}"
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
echo ""
echo -e "${BLUE}üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:${NC}"
echo -e "  ${GREEN}–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:${NC} http://localhost:8000/"
echo -e "  ${GREEN}GraphQL API:${NC} http://localhost:8000/graphql/"
echo -e "  ${GREEN}Admin –ø–∞–Ω–µ–ª—å:${NC} http://localhost:8000/admin/"
echo -e "  ${GREEN}Health check:${NC} http://localhost:8000/health/"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
echo ""
echo -e "${BLUE}üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo -e "  ${GREEN}–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:${NC} docker compose --profile local logs -f web"
echo -e "  ${GREEN}Django shell:${NC} docker compose --profile local exec web python manage.py shell"
echo -e "  ${GREEN}–ü–µ—Ä–µ—Å—á–µ—Ç –æ—Ç—á–µ—Ç–æ–≤:${NC} docker compose --profile local exec web python manage.py recalculate_reports --model building"

echo -e "${BLUE}========================================${NC}"
