version: "3.8"

services:
  # База данных
  postgres-production:
    image: pgvector/pgvector:pg15
    container_name: memory-postgres-production
    environment:
      POSTGRES_DB: memory_llm
      POSTGRES_USER: memoryuser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U memoryuser -d memory_llm"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis для кэширования
  redis-production:
    image: redis:7-alpine
    container_name: memory-redis-production
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Memory Service
  memory-service-production:
    build:
      context: ./memory-service
      dockerfile: Dockerfile.production
    container_name: memory-llm-production
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-production:5432/memory_llm
      SPRING_DATASOURCE_USERNAME: memoryuser
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      MEMORY_API_KEY: ${MEMORY_API_KEY}
      MEMORY_ADMIN_KEY: ${MEMORY_ADMIN_KEY}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      LIMITS_MAX_TEXT_LENGTH: ${LIMITS_MAX_TEXT_LENGTH}
      LIMITS_MAX_BATCH_ITEMS: ${LIMITS_MAX_BATCH_ITEMS}
      LIMITS_MAX_TOPK: ${LIMITS_MAX_TOPK}
      LIMITS_COST_THRESHOLD: ${LIMITS_COST_THRESHOLD}
      SPRING_FLYWAY_ENABLED: ${SPRING_FLYWAY_ENABLED}
      SPRING_REDIS_HOST: redis-production
      SPRING_REDIS_PORT: 6379
    ports:
      - "8081:8080"
    depends_on:
      postgres-production:
        condition: service_healthy
      redis-production:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Nginx
  nginx-production:
    image: nginx:alpine
    container_name: memory-nginx-production
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/.htpasswd:/etc/nginx/.htpasswd:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
    depends_on:
      memory-service-production:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus для метрик
  prometheus:
    image: prom/prometheus:latest
    container_name: memory-prometheus
    volumes:
      - ./configs/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana для дашбордов
  grafana:
    image: grafana/grafana:latest
    container_name: memory-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  nginx_logs:
  prometheus_data:
  grafana_data:
