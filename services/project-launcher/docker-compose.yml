version: '3.8'

services:
  # ========================================
  # Project Launcher API Service
  # ========================================
  project-launcher-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: project-launcher-api
    ports:
      - "${PROJECT_LAUNCHER_PORT:-8000}:8000"
    volumes:
      - ./src:/app/src
      - ./configs:/app/configs
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/app/logs
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_URL=${DATABASE_URL:-postgresql://launcher:launcher@project-launcher-db:5432/launcher}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      - project-launcher-db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ========================================
  # Project Launcher Frontend
  # ========================================
  project-launcher-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: project-launcher-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    volumes:
      - ./frontend/src:/app/src
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REACT_APP_API_URL=http://localhost:${PROJECT_LAUNCHER_PORT:-8000}
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - project-launcher-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ========================================
  # PostgreSQL Database
  # ========================================
  project-launcher-db:
    image: postgres:16-alpine
    container_name: project-launcher-db
    ports:
      - "${DB_PORT:-5434}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=launcher
      - POSTGRES_USER=launcher
      - POSTGRES_PASSWORD=launcher
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U launcher -d launcher"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ========================================
  # Redis Cache
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: project-launcher-redis
    ports:
      - "${REDIS_PORT:-6378}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ========================================
  # Prometheus Monitoring
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: project-launcher-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9091}:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # ========================================
  # Grafana Dashboard
  # ========================================
  grafana:
    image: grafana/grafana:latest
    container_name: project-launcher-grafana
    ports:
      - "${GRAFANA_PORT:-3002}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped

  # ========================================
  # Elasticsearch (для логов)
  # ========================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: project-launcher-elasticsearch
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # ========================================
  # Kibana (для просмотра логов)
  # ========================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: project-launcher-kibana
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./monitoring/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # ========================================
  # Nginx Reverse Proxy
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: project-launcher-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - project-launcher-api
      - project-launcher-frontend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  nginx_logs:

networks:
  default:
    name: project-launcher-network
    driver: bridge
