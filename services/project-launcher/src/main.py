"""
Project Launcher API Service
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–º–∏ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ Dubai
"""

from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
import uvicorn
import logging
from typing import Dict, Any
from datetime import datetime

from .core.docker import DockerManager
from .core.config import ConfigManager
from .core.monitoring import MonitoringManager
from .api import projects, monitoring, config, auth
from .models.schemas import HealthCheck, SystemInfo
from .utils.logger import setup_logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
docker_manager: DockerManager = None
config_manager: ConfigManager = None
monitoring_manager: MonitoringManager = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global docker_manager, config_manager, monitoring_manager
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    logger.info("üöÄ Starting Project Launcher API Service...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        docker_manager = DockerManager()
        config_manager = ConfigManager()
        monitoring_manager = MonitoringManager()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Docker
        await docker_manager.health_check()
        logger.info("‚úÖ Docker connection established")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–æ–≤
        await config_manager.load_projects()
        logger.info("‚úÖ Project configurations loaded")
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await monitoring_manager.start()
        logger.info("‚úÖ Monitoring started")
        
        yield
        
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize services: {e}")
        raise
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        logger.info("üõë Shutting down Project Launcher...")
        if monitoring_manager:
            await monitoring_manager.stop()
        logger.info("‚úÖ Shutdown complete")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Dubai Project Launcher API",
    description="–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–º–∏ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Dubai",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í production –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router, prefix="/api/v1/auth", tags=["Authentication"])
app.include_router(projects.router, prefix="/api/v1/projects", tags=["Projects"])
app.include_router(monitoring.router, prefix="/api/v1/monitoring", tags=["Monitoring"])
app.include_router(config.router, prefix="/api/v1/config", tags=["Configuration"])

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è Swagger UI
app.mount("/static", StaticFiles(directory="static"), name="static")


@app.get("/", response_model=Dict[str, Any])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–∏—Å–µ"""
    return {
        "service": "Dubai Project Launcher API",
        "version": "1.0.0",
        "description": "–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
        "endpoints": {
            "docs": "/docs",
            "redoc": "/redoc",
            "health": "/health",
            "projects": "/api/v1/projects",
            "monitoring": "/api/v1/monitoring",
            "config": "/api/v1/config"
        },
        "status": "running"
    }


@app.get("/health", response_model=HealthCheck)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
        docker_healthy = await docker_manager.health_check() if docker_manager else False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_healthy = await config_manager.health_check() if config_manager else False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_healthy = await monitoring_manager.health_check() if monitoring_manager else False
        
        overall_healthy = all([docker_healthy, db_healthy, monitoring_healthy])
        
        return HealthCheck(
            status="healthy" if overall_healthy else "unhealthy",
            timestamp=datetime.utcnow().isoformat(),
            services={
                "docker": "healthy" if docker_healthy else "unhealthy",
                "database": "healthy" if db_healthy else "unhealthy",
                "monitoring": "healthy" if monitoring_healthy else "unhealthy"
            },
            version="1.0.0"
        )
        
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/system/info", response_model=SystemInfo)
async def system_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        return await monitoring_manager.get_system_info()
    except Exception as e:
        logger.error(f"Failed to get system info: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/status")
async def api_status():
    """–°—Ç–∞—Ç—É—Å API –∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        projects_status = await projects.get_all_projects_status()
        system_status = await monitoring_manager.get_overview()
        
        return {
            "api": "healthy",
            "timestamp": datetime.utcnow().isoformat(),
            "projects": projects_status,
            "system": system_status
        }
        
    except Exception as e:
        logger.error(f"API status check failed: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(404)
async def not_found_handler(request, exc):
    return {
        "error": "Not Found",
        "message": "The requested resource was not found",
        "path": request.url.path
    }


@app.exception_handler(500)
async def internal_error_handler(request, exc):
    logger.error(f"Internal server error: {exc}")
    return {
        "error": "Internal Server Error",
        "message": "An unexpected error occurred",
        "path": request.url.path
    }


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
