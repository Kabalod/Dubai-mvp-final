# üöÄ Dubai Project - Lint Documentation (PowerShell)
# –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

param(
    [switch]$Fix,
    [switch]$Verbose,
    [switch]$Test
)

$ErrorActionPreference = 'Stop'

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Colors = @{
    Red = 'Red'
    Green = 'Green'
    Yellow = 'Yellow'
    Blue = 'Blue'
    Cyan = 'Cyan'
    Default = 'White'
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å —Ü–≤–µ—Ç–æ–º
function Write-Status {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor $Colors.Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor $Colors.Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor $Colors.Red
}

function Write-Info {
    param([string]$Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor $Colors.Default
}

function Write-Debug {
    param([string]$Message)
    if ($Verbose) {
        Write-Host "üîç $Message" -ForegroundColor $Colors.Blue
    }
}

Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Dubai Project..." -ForegroundColor Cyan
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è markdownlint
function Test-Markdownlint {
    try {
        $null = Get-Command markdownlint -ErrorAction Stop
        Write-Status "Markdownlint –Ω–∞–π–¥–µ–Ω"
        return $true
    }
    catch {
        Write-Warning "Markdownlint –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g markdownlint-cli"
        return $false
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ markdown —Ñ–∞–π–ª–æ–≤
function Invoke-MarkdownLint {
    if (Test-Markdownlint) {
        Write-Info "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ Markdown —Ñ–∞–π–ª–æ–≤..."
        try {
            $result = markdownlint '**/*.md' --ignore .markdownlintignore 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Status "Markdown –ª–∏–Ω—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            } else {
                Write-Warning "Markdown –ª–∏–Ω—Ç–∏–Ω–≥ –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—ã:"
                Write-Host $result -ForegroundColor $Colors.Yellow
            }
        }
        catch {
            Write-Warning "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ markdownlint: $_"
        }
    }
    else {
        Write-Warning "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º Markdown –ª–∏–Ω—Ç–∏–Ω–≥"
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
function Test-Headers {
    Write-Info "üè∑Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤..."
    
    $mdFiles = Get-ChildItem -Path . -Filter "*.md" -Recurse | Where-Object { $_.FullName -notlike "*\site\*" }
    $totalIssues = 0
    
    foreach ($file in $mdFiles) {
        $content = Get-Content $file.FullName -Raw
        $lines = $content -split "`n"
        
        $h1Count = 0
        $h2Exists = $false
        $h3Exists = $false
        $issues = @()
        
        foreach ($line in $lines) {
            if ($line -match "^# ") {
                $h1Count++
            }
            elseif ($line -match "^## ") {
                $h2Exists = $true
            }
            elseif ($line -match "^### ") {
                $h3Exists = $true
            }
        }
        
        if ($h1Count -gt 1) {
            $issues += "–ù–∞–π–¥–µ–Ω–æ $h1Count H1 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω)"
            $totalIssues++
        }
        
        if ($h1Count -eq 0) {
            $issues += "H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            $totalIssues++
        }
        
        if ($h1Count -eq 1 -and -not $h2Exists) {
            $issues += "H2 –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Å–ª–µ H1"
            $totalIssues++
        }
        
        if ($issues.Count -gt 0) {
            Write-Warning "–§–∞–π–ª $($file.Name):"
            foreach ($issue in $issues) {
                Write-Host "  - $issue" -ForegroundColor $Colors.Yellow
            }
        }
    }
    
    if ($totalIssues -eq 0) {
        Write-Status "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
    } else {
        Write-Warning "–ù–∞–π–¥–µ–Ω–æ $totalIssues –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"
    }
    
    return $totalIssues
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
function Test-InternalLinks {
    Write-Info "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫..."
    
    $mdFiles = Get-ChildItem -Path . -Filter "*.md" -Recurse | Where-Object { $_.FullName -notlike "*\site\*" }
    $brokenLinks = 0
    $totalLinks = 0
    
    foreach ($file in $mdFiles) {
        try {
            $content = Get-Content $file.FullName -Raw
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
            $linkPattern = '\[([^\]]+)\]\(([^)]+)\)'
            $matches = [regex]::Matches($content, $linkPattern)
            
            foreach ($match in $matches) {
                $link = $match.Groups[2].Value
                $totalLinks++
                
                if ($link -match '^\./') {
                    $targetPath = Join-Path (Split-Path $file.FullName) $link.Substring(2)
                    if (-not (Test-Path $targetPath)) {
                        Write-Warning "–°–ª–æ–º–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤ $($file.Name): $link"
                        $brokenLinks++
                    }
                }
            }
        }
        catch {
            Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª $($file.Name): $_"
        }
    }
    
    if ($brokenLinks -eq 0) {
        Write-Status "–í—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
    } else {
        Write-Warning "–ù–∞–π–¥–µ–Ω–æ $brokenLinks —Å–ª–æ–º–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ $totalLinks"
    }
    
    return $brokenLinks
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
function Test-Quality {
    Write-Info "üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
    
    $mdFiles = Get-ChildItem -Path . -Filter "*.md" -Recurse | Where-Object { $_.FullName -notlike "*\site\*" }
    $totalFiles = $mdFiles.Count
    $qualityScore = 0
    
    foreach ($file in $mdFiles) {
        $content = Get-Content $file.FullName -Raw
        $lines = $content -split "`n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ñ–∞–π–ª–∞
        if ($lines.Count -gt 10) {
            $qualityScore += 1
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        if ($content -match "## –û–±–∑–æ—Ä" -or $content -match "## –û–ø–∏—Å–∞–Ω–∏–µ") {
            $qualityScore += 1
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if ($content -match "## " -and $content -match "### ") {
            $qualityScore += 1
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞
        if ($content -match "```") {
            $qualityScore += 1
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
        if ($content -match '\[.*\]\(.*\)') {
            $qualityScore += 1
        }
    }
    
    $maxScore = $totalFiles * 5
    $percentage = [math]::Round(($qualityScore / $maxScore) * 100, 1)
    
    Write-Info "–ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: $percentage% ($qualityScore/$maxScore)"
    
    if ($percentage -ge 80) {
        Write-Status "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
    } elseif ($percentage -ge 60) {
        Write-Warning "–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"
    } else {
        Write-Error "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
    }
    
    return $percentage
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–æ–±–ª–µ–º
function Fix-CommonIssues {
    Write-Info "üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–æ–±–ª–µ–º..."
    
    $mdFiles = Get-ChildItem -Path . -Filter "*.md" -Recurse | Where-Object { $_.FullName -notlike "*\site\*" }
    $fixedFiles = 0
    
    foreach ($file in $mdFiles) {
        try {
            $content = Get-Content $file.FullName -Raw
            $lines = $content -split "`n"
            $modified = $false
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö H1 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            $h1Count = 0
            $hasH2Before = $false
            
            for ($i = 0; $i -lt $lines.Count; $i++) {
                if ($lines[$i] -match "^# ") {
                    $h1Count++
                    if ($h1Count -gt 1) {
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ H2 –ø–µ—Ä–µ–¥ —ç—Ç–∏–º H1
                        for ($j = 0; $j -lt $i; $j++) {
                            if ($lines[$j] -match "^## ") {
                                $hasH2Before = $true
                                break
                            }
                        }
                        
                        if (-not $hasH2Before) {
                            $lines[$i] = $lines[$i] -replace "^# ", "## "
                            $modified = $true
                        }
                    }
                }
            }
            
            if ($modified) {
                $content = $lines -join "`n"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if ($modified) {
                $content | Out-File -FilePath $file.FullName -Encoding UTF8
                Write-Status "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: $($file.Name)"
                $fixedFiles++
            }
        }
        catch {
            Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª $($file.Name): $_"
        }
    }
    
    if ($fixedFiles -eq 0) {
        Write-Status "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è"
    }
    else {
        Write-Status "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ $fixedFiles —Ñ–∞–π–ª–æ–≤"
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    $startTime = Get-Date
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    Test-Headers
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
    Test-InternalLinks
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    Test-Quality
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if ($Fix) {
        Fix-CommonIssues
    }
    
    # Markdown –ª–∏–Ω—Ç–∏–Ω–≥
    Invoke-MarkdownLint
    
    $endTime = Get-Date
    $duration = $endTime - $startTime
    
    Write-Host ""
    Write-Host "==================================" -ForegroundColor Cyan
    Write-Status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    Write-Host ""
    Write-Host "üìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Yellow
    Write-Host "1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã" -ForegroundColor White
    Write-Host "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏" -ForegroundColor White
    Write-Host "3. –°–ª–µ–¥—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ CONTRIBUTING.md" -ForegroundColor White
    Write-Host "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GPT_RULES.md –¥–ª—è AI –º–æ–¥–µ–ª–µ–π" -ForegroundColor White
    Write-Host "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CURSOR_RULES.md –¥–ª—è Cursor IDE" -ForegroundColor White
    Write-Host ""
    Write-Host "üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:" -ForegroundColor Yellow
    Write-Host "  .\lint-docs.ps1          # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞" -ForegroundColor White
    Write-Host "  .\lint-docs.ps1 -Verbose # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥" -ForegroundColor White
    Write-Host "  .\lint-docs.ps1 -Fix     # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" -ForegroundColor White
    Write-Host "  .\lint-docs.ps1 -Test    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º" -ForegroundColor White
    Write-Host ""
    Write-Host "‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $($duration.TotalSeconds.ToString('F2')) —Å–µ–∫" -ForegroundColor Cyan
}

# –ó–∞–ø—É—Å–∫
if ($Test) {
    Write-Info "üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –ª–∏–Ω—Ç–µ—Ä–∞..."
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã
    Write-Status "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
} else {
    Main
}
