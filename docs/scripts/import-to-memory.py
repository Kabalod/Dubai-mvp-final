#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Dubai Platform –≤ Memory LLM —Å–µ—Ä–≤–∏—Å
"""

import os
import json
import requests
from pathlib import Path
import markdown
from bs4 import BeautifulSoup
import re

class DocumentationImporter:
    def __init__(self, memory_llm_url="http://localhost:8080"):
        self.memory_llm_url = memory_llm_url
        self.docs_path = Path(__file__).parent.parent
        self.imported_count = 0
        self.errors = []

    def extract_text_from_markdown(self, file_path):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∏–∑ Markdown —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML
            html = markdown.markdown(content, extensions=['toc', 'tables', 'fenced_code'])
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
            soup = BeautifulSoup(html, 'html.parser')
            text = soup.get_text()
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
            text = re.sub(r'\n\s*\n', '\n\n', text)
            text = re.sub(r' +', ' ', text)
            
            return text.strip()
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
            return None

    def get_file_metadata(self, file_path):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞"""
        rel_path = file_path.relative_to(self.docs_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –ø—É—Ç–∏
        if 'api' in str(rel_path):
            category = 'api'
        elif 'architecture' in str(rel_path):
            category = 'architecture'
        elif 'deployment' in str(rel_path):
            category = 'deployment'
        elif 'development' in str(rel_path):
            category = 'development'
        elif 'user-guides' in str(rel_path):
            category = 'user_guides'
        elif 'troubleshooting' in str(rel_path):
            category = 'troubleshooting'
        else:
            category = 'general'

        return {
            "file_path": str(rel_path),
            "category": category,
            "file_type": "documentation",
            "platform": "dubai",
            "language": "ru",
            "version": "1.0.0"
        }

    def import_file_to_memory(self, file_path):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –≤ Memory LLM"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            content = self.extract_text_from_markdown(file_path)
            if not content:
                return False

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = self.get_file_metadata(file_path)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            import_data = {
                "content": content,
                "metadata": metadata
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Memory LLM
            response = requests.post(
                f"{self.memory_llm_url}/api/v1/vectors/add",
                json=import_data,
                headers={"Content-Type": "application/json"},
                timeout=30
            )

            if response.status_code == 200:
                self.imported_count += 1
                print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {file_path.name}")
                return True
            else:
                error_msg = f"–û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}"
                self.errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {file_path.name}: {error_msg}")
                print(f"‚ùå –û—à–∏–±–∫–∞: {file_path.name} - {error_msg}")
                return False

        except requests.exceptions.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"
            self.errors.append(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {file_path.name}: {error_msg}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {file_path.name}")
            return False
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
            self.errors.append(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {file_path.name}: {error_msg}")
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {file_path.name}")
            return False

    def find_markdown_files(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ Markdown —Ñ–∞–π–ª—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        markdown_files = []
        
        for file_path in self.docs_path.rglob("*.md"):
            if file_path.name not in ['README.md', 'index.md']:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
                markdown_files.append(file_path)
        
        return sorted(markdown_files)

    def import_all_documentation(self):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ Memory LLM...")
        print(f"üìÅ –ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {self.docs_path}")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Markdown —Ñ–∞–π–ª—ã
        markdown_files = self.find_markdown_files()
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: {len(markdown_files)}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for file_path in markdown_files:
            self.import_file_to_memory(file_path)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.print_summary()

    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –∏–º–ø–æ—Ä—Ç–∞"""
        print("\n" + "="*50)
        print("üìä –°–í–û–î–ö–ê –ò–ú–ü–û–†–¢–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")
        print("="*50)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {self.imported_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(self.errors)}")
        
        if self.errors:
            print("\nüîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:")
            for error in self.errors:
                print(f"  - {error}")
        
        print("\nüéØ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Memory LLM!")
        print("üîç –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫")

    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Memory LLM"""
        try:
            response = requests.get(f"{self.memory_llm_url}/health", timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Memory LLM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self.memory_llm_url}")
                return True
            else:
                print(f"‚ùå Memory LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Memory LLM: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåü Dubai Platform - –ò–º–ø–æ—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ Memory LLM")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º–ø–æ—Ä—Ç–µ—Ä
    importer = DocumentationImporter()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if not importer.test_connection():
        print("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Memory LLM —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω:")
        print("   docker compose -f docker-compose.monitoring.yml up -d")
        print("\nüí° –ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ URL –≤ —Å–∫—Ä–∏–ø—Ç–µ")
        return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    importer.import_all_documentation()

if __name__ == "__main__":
    main()
