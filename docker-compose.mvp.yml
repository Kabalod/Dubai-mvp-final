# ========================================
# MVP архитектура для быстрого релиза
# Только основные сервисы без AI
# ========================================

# Загрузка переменных окружения
# env_file: .env.mvp

services:
  # ========================================
  # База данных PostgreSQL
  # ========================================
  postgres:
    image: postgres:16-alpine
    container_name: mvp-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=dubai_realty
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ========================================
  # Redis (кэш и сессии)
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: mvp-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ========================================
  # Парсер PropertyFinder (отдельный сервер) - отключен для MVP
  # ========================================
  # parser-service:
  #   image: dubai_mvp-parser-service:latest
  #   container_name: mvp-parser
  #   ports:
  #     - "${PARSER_PORT:-8002}:8000"
  #   volumes:
  #     - ./apps/pfimport-main:/app
  #     - ./shared-data:/shared-data  # Общая папка для JSON файлов
  #   environment:
  #     - DEBUG=1
  #     - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,parser-service
  #     - SECRET_KEY=${SECRET_KEY:-mvp-secret-key-change-in-production}
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
  #     interval: 60s
  #     timeout: 10s
  #     retries: 3

  # ========================================
  # Основной API сервер (Django)
  # ========================================
  api-service:
    image: dubai_mvp-api-service:latest
    container_name: mvp-api
    volumes:
      - ./apps/realty-main:/app
      - ./shared-data:/shared-data  # Общая папка для JSON файлов
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,[::1],api-service
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/dubai_realty
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-mvp-secret-key-change-in-production}
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:80
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # React Frontend
  # ========================================
  frontend:
    image: dubai_mvp-frontend:latest
    container_name: mvp-frontend
    ports:
      - "3000:80"
    volumes:
      - ./apps/DXB-frontend-develop:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - api-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # Nginx (прокси для всех сервисов)
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: mvp-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - api-service
      - frontend
    restart: unless-stopped

  # ========================================
  # Базовый мониторинг (опционально)
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: mvp-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    profiles: ["monitoring"]

  grafana:
    image: grafana/grafana:latest
    container_name: mvp-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3003:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles: ["monitoring"]

# ========================================
# Volumes
# ========================================
volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

# ========================================
# Networks
# ========================================
networks:
  default:
    name: mvp-network
    driver: bridge