# üê≥ Production Docker Compose –¥–ª—è Dubai MVP
# –í–µ—Ä—Å–∏—è: Production-Ready
# –î–∞—Ç–∞: 2025-01-23

version: '3.8'

services:
  # ================================
  # Database
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: dubai_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dubai_mvp}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-dubai_mvp}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - dubai_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: dubai_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-secure_redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dubai_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Backend API
  # ================================
  backend:
    build:
      context: ./apps/realty-main
      dockerfile: Dockerfile.optimized
    container_name: dubai_backend
    restart: unless-stopped
    environment:
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/${POSTGRES_DB:-dubai_mvp}
      
      # Redis
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      
      # Django Settings
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key-in-production}
      - DEBUG=${DEBUG:-false}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1,backend}
      
      # CORS
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
      
      # Email
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-noreply@dubai-mvp.com}
      
      # Security
      - SECURE_SSL_REDIRECT=${SECURE_SSL_REDIRECT:-false}
      - SECURE_HSTS_SECONDS=${SECURE_HSTS_SECONDS:-31536000}
      
      # Logging
      - DJANGO_LOG_LEVEL=${DJANGO_LOG_LEVEL:-INFO}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - media_files:/app/media
      - static_files:/app/static
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - dubai_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Frontend
  # ================================
  frontend:
    build:
      context: ./apps/DXB-frontend-develop
      dockerfile: Dockerfile.optimized
      target: production
    container_name: dubai_frontend
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - backend
    volumes:

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - dubai_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Direct Access (nginx removed)
  # Frontend: http://localhost:3000
  # Backend: http://localhost:8000  
  # ================================
    profiles:
      - production

  # ================================
  # Monitoring
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: dubai_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./configs/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - dubai_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: dubai_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - dubai_network
    profiles:
      - monitoring

# ================================
# Volumes
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ================================
# Networks
# ================================
networks:
  dubai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
