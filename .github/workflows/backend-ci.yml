name: Backend CI

on:
  push:
    branches: ["feat/**", "prod"]
    paths:
      - "apps/realty-main/**"
      - ".github/workflows/backend-ci.yml"
  pull_request:
    branches: ["prod", "feat/**"]
    paths:
      - "apps/realty-main/**"

jobs:
  lint-type-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: dubai_mvp
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dubai_mvp
      TASKS_DATABASE_URL: sqlite:///tasks_db.sqlite3
      SECRET_KEY: test-secret
      DEBUG: "false"

    defaults:
      run:
        working-directory: apps/realty-main

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('apps/realty-main/pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install ruff mypy django-stubs pytest pytest-django pytest-xdist coverage[toml]

      - name: Check database readiness
        run: |
          for i in {1..20}; do
            pg_isready -h localhost -p 5432 -U postgres && break
            sleep 2
          done

      - name: Run migrations
        env:
          DJANGO_SETTINGS_MODULE: realty.settings
        run: |
          python - <<'PY'
          import os
          import django
          os.environ.setdefault('DJANGO_SETTINGS_MODULE','realty.settings')
          django.setup()
          from django.core.management import call_command
          call_command('migrate', '--noinput')
          PY

      - name: Ruff (lint)
        run: |
          pip install ruff
          ruff check .

      - name: MyPy (types)
        run: |
          pip install mypy django-stubs
          mypy --config-file pyproject.toml . || true

      - name: Pytest
        env:
          DJANGO_SETTINGS_MODULE: realty.settings
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=realty --cov-report=xml

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-xml
          path: apps/realty-main/coverage.xml
          if-no-files-found: warn

name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/realty-main/**'
      - 'apps/pfimport-main/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/realty-main/**'
      - 'apps/pfimport-main/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies for realty-main
        run: pip install -r apps/realty-main/requirements.txt

      - name: Run tests for realty-main
        working-directory: ./apps/realty-main
        env:
          DATABASE_URL: postgres://testuser:testpassword@localhost:5432/test_db
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: "True"
        run: python manage.py test

      # Добавьте шаги для pfimport-main, если у него есть свои тесты
      # - name: Install dependencies for pfimport-main
      #   run: pip install -r pfimport-main/requirements.txt
      # 
      # - name: Run tests for pfimport-main
      #   working-directory: ./pfimport-main
      #   run: pytest
