# Railway-optimized Dockerfile
FROM python:3.12-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    libpq-dev \
    gcc \
    curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy backend requirements and install dependencies (prefer compiled lock)
# How it works:
# - If requirements.compiled.txt exists (generated by CI via pip-tools), install with --require-hashes for deterministic builds
# - Otherwise fallback to requirements.txt
COPY apps/realty-main/requirements.compiled.txt ./requirements.compiled.txt
COPY apps/realty-main/requirements.txt ./requirements.txt
RUN /bin/sh -c 'if [ -f requirements.compiled.txt ]; then \
      pip install --upgrade pip && \
      pip install --no-cache-dir --no-deps --require-hashes -r requirements.compiled.txt; \
    else \
      pip install --upgrade pip && \
      pip install --no-cache-dir -r requirements.txt; \
    fi'

# Copy Django project (backend)
COPY apps/realty-main/ /app/

# Create necessary directories
RUN mkdir -p /app/static /app/media /app/logs

# Set environment
ENV DJANGO_SETTINGS_MODULE=realty.settings_railway
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PORT=8000

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/health/ || exit 1

# Production startup with gunicorn
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "2", "--timeout", "120", "realty.wsgi:application"]
