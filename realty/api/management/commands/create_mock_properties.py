#!/usr/bin/env python3
"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞)
–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ PropertyFinder

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py create_mock_properties
    python manage.py create_mock_properties --clean  # –æ—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    python manage.py create_mock_properties --count=100  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
"""
import random
from decimal import Decimal
from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta

try:
    from realty.pfimport.models import Area, Building, PFListSale, PFListRent
    from realty.main.models import Area as MainArea
except ImportError:
    # Fallback –µ—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    Area = Building = PFListSale = PFListRent = MainArea = None


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç mock –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ MVP –±–µ–∑ –ø–∞—Ä—Å–µ—Ä–∞ PropertyFinder'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clean',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ mock –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö'
        )
        parser.add_argument(
            '--count',
            type=int,
            default=50,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)'
        )
        parser.add_argument(
            '--areas-count',
            type=int,
            default=10,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–π–æ–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)'
        )
        parser.add_argument(
            '--buildings-count',
            type=int,
            default=20,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–∞–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20)'
        )

    def handle(self, *args, **options):
        if not all([Area, Building, PFListSale, PFListRent]):
            self.stdout.write(
                self.style.ERROR('‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ pfimport —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
            )
            return

        clean_data = options['clean']
        properties_count = options['count']
        areas_count = options['areas_count']
        buildings_count = options['buildings_count']

        self.stdout.write(self.style.SUCCESS('üè† –°–æ–∑–¥–∞–Ω–∏–µ mock –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è MVP...'))

        if clean_data:
            self.clean_mock_data()

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–π–æ–Ω—ã (Areas)
        areas = self.create_mock_areas(areas_count)
        
        # –°–æ–∑–¥–∞–µ–º –∑–¥–∞–Ω–∏—è (Buildings)
        buildings = self.create_mock_buildings(buildings_count, areas)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ (PFListSale)
        sale_count = int(properties_count * 0.6)  # 60% –ø—Ä–æ–¥–∞–∂–∞
        self.create_mock_sale_properties(sale_count, buildings, areas)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã (PFListRent)
        rent_count = properties_count - sale_count  # 40% –∞—Ä–µ–Ω–¥–∞
        self.create_mock_rent_properties(rent_count, buildings, areas)

        self.stdout.write(self.style.SUCCESS('‚úÖ Mock –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!'))
        self.stdout.write(self.style.SUCCESS(''))
        self.stdout.write(self.style.SUCCESS('üîó –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:'))
        self.stdout.write(self.style.SUCCESS('  üè¢ –ü—Ä–æ–¥–∞–∂–∞: /pfimport/sale/'))
        self.stdout.write(self.style.SUCCESS('  üè° –ê—Ä–µ–Ω–¥–∞: /pfimport/rent/'))
        self.stdout.write(self.style.SUCCESS('  üìç –ó–¥–∞–Ω–∏—è: /pfimport/api/buildings/'))
        self.stdout.write(self.style.SUCCESS('  üó∫Ô∏è –ö–∞—Ä—Ç–∞: /pfimport/map/'))

    def clean_mock_data(self):
        """–û—á–∏—â–∞–µ—Ç mock –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
        self.stdout.write(self.style.WARNING('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö mock –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...'))
        
        # –£–¥–∞–ª—è–µ–º mock –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        PFListSale.objects.filter(listing_id__startswith='mock_sale_').delete()
        PFListRent.objects.filter(listing_id__startswith='mock_rent_').delete()
        
        # –£–¥–∞–ª—è–µ–º mock –∑–¥–∞–Ω–∏—è –∏ —Ä–∞–π–æ–Ω—ã
        Building.objects.filter(building_name__startswith='Mock Building').delete()
        Area.objects.filter(area_name__startswith='Mock Area').delete()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'))

    def create_mock_areas(self, count):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–∞–π–æ–Ω—ã –î—É–±–∞—è"""
        self.stdout.write(self.style.SUCCESS(f'üìç –°–æ–∑–¥–∞–Ω–∏–µ {count} —Ä–∞–π–æ–Ω–æ–≤ –î—É–±–∞—è...'))
        
        dubai_areas = [
            'Dubai Marina', 'Downtown Dubai', 'Jumeirah Beach Residence (JBR)',
            'Business Bay', 'Dubai Hills Estate', 'Arabian Ranches',
            'Jumeirah Village Circle (JVC)', 'Dubai South', 'Al Barsha',
            'Jumeirah Lakes Towers (JLT)', 'The Greens', 'Emirates Hills',
            'Palm Jumeirah', 'Bluewaters Island', 'Dubai Healthcare City',
            'DIFC (Dubai International Financial Centre)', 'City Walk',
            'Mirdif', 'Dubai Silicon Oasis', 'Jumeirah'
        ]
        
        areas = []
        
        for i in range(min(count, len(dubai_areas))):
            area_name = dubai_areas[i]
            
            area, created = Area.objects.get_or_create(
                area_name=area_name,
                defaults={
                    'area_name': area_name,
                }
            )
            
            areas.append(area)
            
            status = "—Å–æ–∑–¥–∞–Ω" if created else "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            self.stdout.write(f'  üìç {area.area_name} - {status}')

        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ mock —Ä–∞–π–æ–Ω—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        for i in range(len(dubai_areas), count):
            area_name = f'Mock Area {i+1}'
            
            area, created = Area.objects.get_or_create(
                area_name=area_name,
                defaults={
                    'area_name': area_name,
                }
            )
            
            areas.append(area)
            
            if created:
                self.stdout.write(f'  üìç {area.area_name} - —Å–æ–∑–¥–∞–Ω')

        return areas

    def create_mock_buildings(self, count, areas):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–¥–∞–Ω–∏—è"""
        self.stdout.write(self.style.SUCCESS(f'üè¢ –°–æ–∑–¥–∞–Ω–∏–µ {count} –∑–¥–∞–Ω–∏–π...'))
        
        building_types = [
            'Tower', 'Residence', 'Plaza', 'Heights', 'Park', 'Gardens',
            'Marina', 'Bay', 'Square', 'Court', 'Villas', 'Apartments'
        ]
        
        buildings = []
        
        for i in range(count):
            area = random.choice(areas)
            building_type = random.choice(building_types)
            building_name = f'Mock Building {i+1} {building_type}'
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –î—É–±–∞—è
            latitude = random.uniform(25.0500, 25.3000)  # –î—É–±–∞–π —à–∏—Ä–æ—Ç–∞
            longitude = random.uniform(55.0000, 55.4000)  # –î—É–±–∞–π –¥–æ–ª–≥–æ—Ç–∞
            
            building, created = Building.objects.get_or_create(
                building_name=building_name,
                defaults={
                    'building_name': building_name,
                    'area': area,
                    'latitude': latitude,
                    'longitude': longitude,
                }
            )
            
            buildings.append(building)
            
            if created:
                self.stdout.write(f'  üè¢ {building.building_name} –≤ {area.area_name} - —Å–æ–∑–¥–∞–Ω')

        return buildings

    def create_mock_sale_properties(self, count, buildings, areas):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏"""
        self.stdout.write(self.style.SUCCESS(f'üè† –°–æ–∑–¥–∞–Ω–∏–µ {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–∂–∏...'))
        
        property_types = ['Apartment', 'Villa', 'Townhouse', 'Penthouse']
        bedrooms_options = ['studio', '1', '2', '3', '4', '5']
        bathrooms_options = ['1', '2', '3', '4', '5']
        
        for i in range(count):
            building = random.choice(buildings)
            area = building.area or random.choice(areas)
            property_type = random.choice(property_types)
            bedrooms = random.choice(bedrooms_options)
            bathrooms = random.choice(bathrooms_options)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã –≤ AED
            if bedrooms == 'studio':
                price = Decimal(random.uniform(400000, 800000))
                area_size = random.uniform(450, 650)
            elif bedrooms == '1':
                price = Decimal(random.uniform(700000, 1500000))
                area_size = random.uniform(650, 900)
            elif bedrooms == '2':
                price = Decimal(random.uniform(1200000, 2500000))
                area_size = random.uniform(900, 1300)
            elif bedrooms == '3':
                price = Decimal(random.uniform(2000000, 4000000))
                area_size = random.uniform(1300, 1800)
            else:  # 4+ bedrooms
                price = Decimal(random.uniform(3500000, 8000000))
                area_size = random.uniform(1800, 3000)
            
            # –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –¥–Ω–µ–π
            days_ago = random.randint(0, 60)
            added_date = timezone.now() - timedelta(days=days_ago)
            
            listing = PFListSale.objects.create(
                listing_id=f'mock_sale_{i+1}',
                title=f'{bedrooms.title()} BR {property_type} for Sale in {area.area_name}',
                display_address=f'{building.building_name}, {area.area_name}',
                bedrooms=bedrooms,
                bathrooms=bathrooms,
                property_type=property_type,
                listing_type='Residential for Sale',
                price=price,
                price_currency='AED',
                price_duration='sell',
                building=building,
                area=area,
                latitude=building.latitude + random.uniform(-0.001, 0.001),
                longitude=building.longitude + random.uniform(-0.001, 0.001),
                numeric_area=area_size,
                size_min=f'{int(area_size)} sqft',
                broker='Mock Real Estate Agency',
                agent=f'Agent {random.randint(1, 50)}',
                agent_phone=f'+971 50 {random.randint(1000000, 9999999)}',
                verified=random.choice([True, False]),
                furnishing=random.choice(['Furnished', 'Semi-Furnished', 'Unfurnished']),
                added_on=added_date,
                description=f'Beautiful {bedrooms} bedroom {property_type.lower()} with stunning views. Prime location in {area.area_name}.',
                url=f'https://mock-propertyfinder.com/sale/{i+1}'
            )
            
            if i < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                self.stdout.write(
                    f'  üè† {listing.title} - {listing.price:,.0f} AED'
                )

    def create_mock_rent_properties(self, count, buildings, areas):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã"""
        self.stdout.write(self.style.SUCCESS(f'üè° –°–æ–∑–¥–∞–Ω–∏–µ {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∞—Ä–µ–Ω–¥—ã...'))
        
        property_types = ['Apartment', 'Villa', 'Townhouse', 'Studio']
        bedrooms_options = ['studio', '1', '2', '3', '4']
        bathrooms_options = ['1', '2', '3', '4']
        
        for i in range(count):
            building = random.choice(buildings)
            area = building.area or random.choice(areas)
            property_type = random.choice(property_types)
            bedrooms = random.choice(bedrooms_options)
            bathrooms = random.choice(bathrooms_options)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã –∞—Ä–µ–Ω–¥—ã –≤ AED (–≥–æ–¥–æ–≤—ã–µ)
            if bedrooms == 'studio':
                price = Decimal(random.uniform(35000, 60000))
                area_size = random.uniform(450, 650)
            elif bedrooms == '1':
                price = Decimal(random.uniform(55000, 95000))
                area_size = random.uniform(650, 900)
            elif bedrooms == '2':
                price = Decimal(random.uniform(85000, 150000))
                area_size = random.uniform(900, 1300)
            elif bedrooms == '3':
                price = Decimal(random.uniform(130000, 250000))
                area_size = random.uniform(1300, 1800)
            else:  # 4+ bedrooms
                price = Decimal(random.uniform(200000, 400000))
                area_size = random.uniform(1800, 2500)
            
            # –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            days_ago = random.randint(0, 30)
            added_date = timezone.now() - timedelta(days=days_ago)
            
            listing = PFListRent.objects.create(
                listing_id=f'mock_rent_{i+1}',
                title=f'{bedrooms.title()} BR {property_type} for Rent in {area.area_name}',
                display_address=f'{building.building_name}, {area.area_name}',
                bedrooms=bedrooms,
                bathrooms=bathrooms,
                property_type=property_type,
                listing_type='Residential for Rent',
                price=price,
                price_currency='AED',
                price_duration='rent',
                building=building,
                area=area,
                latitude=building.latitude + random.uniform(-0.001, 0.001),
                longitude=building.longitude + random.uniform(-0.001, 0.001),
                numeric_area=area_size,
                size_min=f'{int(area_size)} sqft',
                broker='Mock Property Management',
                agent=f'Rental Agent {random.randint(1, 30)}',
                agent_phone=f'+971 50 {random.randint(1000000, 9999999)}',
                verified=random.choice([True, False]),
                furnishing=random.choice(['Furnished', 'Semi-Furnished', 'Unfurnished']),
                added_on=added_date,
                description=f'Spacious {bedrooms} bedroom {property_type.lower()} available for rent. Excellent amenities in {area.area_name}.',
                url=f'https://mock-propertyfinder.com/rent/{i+1}'
            )
            
            if i < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                self.stdout.write(
                    f'  üè° {listing.title} - {listing.price:,.0f} AED/year'
                )
