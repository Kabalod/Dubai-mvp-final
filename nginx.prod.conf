events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=parser:10m rate=1r/s;

    # Upstream servers
    upstream api_backend {
        server api-service:8000 max_fails=3 fail_timeout=30s;
    }

    upstream parser_backend {
        server parser-service:8000 max_fails=3 fail_timeout=30s;
    }

    upstream frontend_backend {
        server frontend:80 max_fails=3 fail_timeout=30s;
    }

    # ========================================
    # HTTP to HTTPS redirect
    # ========================================
    server {
        listen 80;
        server_name _;
        
        # Allow health checks on HTTP
        location = /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        location = /api/health/ {
            proxy_pass http://api_backend/api/health/;
        }

        location = /parser/health/ {
            proxy_pass http://parser_backend/health/;
        }
        
        # Redirect everything else to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # ========================================
    # HTTPS Production Server
    # ========================================
    server {
        listen 443 ssl http2;
        server_name _;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;

        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;

        # ========================================
        # API Endpoints (with rate limiting)
        # ========================================
        location /api/ {
            limit_req zone=api burst=20 nodelay;

            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # CORS headers for API
            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
            add_header Access-Control-Allow-Credentials "true" always;
            
            # Handle preflight
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # ========================================
        # Parser Service (with heavy rate limiting)
        # ========================================
        location /parser/ {
            limit_req zone=parser burst=5 nodelay;

            proxy_pass http://parser_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        # ========================================
        # Static Files (with caching)
        # ========================================
        location /static/ {
            alias /var/www/static/;
            expires 30d;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            # Gzip static files
            location ~* \.(css|js|json|xml|txt)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                gzip_static on;
            }
        }

        location /media/ {
            alias /var/www/media/;
            expires 7d;
            add_header Cache-Control "public";
        }

        # ========================================
        # React Frontend (SPA)
        # ========================================
        location / {
            proxy_pass http://frontend_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ========================================
        # Health Checks
        # ========================================
        location = /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        location = /health/api {
            proxy_pass http://api_backend/api/health/;
        }

        location = /health/parser {
            proxy_pass http://parser_backend/health/;
        }

        # ========================================
        # Security & Performance
        # ========================================
        
        # Block common exploits
        location ~* \.(php|asp|aspx|jsp)$ {
            return 404;
        }
        
        # Block access to sensitive files
        location ~* \.(env|git|svn|htaccess|htpasswd)$ {
            return 404;
        }
        
        # Favicon
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        
        # Robots.txt
        location = /robots.txt {
            log_not_found off;
            access_log off;
        }
    }
}

# Dev HTTP server removed for production